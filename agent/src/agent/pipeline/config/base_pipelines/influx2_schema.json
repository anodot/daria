{
  "pipelineConfig" : {
    "schemaVersion" : 6,
    "version" : 19,
    "pipelineId" : "influx2sc0e533d95-5b42-4930-a313-c1d65f4b2ad6",
    "title" : "influx2_schema",
    "description" : "",
    "uuid" : "51148d92-fa17-4d4b-9fd4-38fd6b9523ff",
    "configuration" : [ {
      "name" : "executionMode",
      "value" : "STANDALONE"
    }, {
      "name" : "edgeHttpUrl",
      "value" : "http://localhost:18633"
    }, {
      "name" : "deliveryGuarantee",
      "value" : "AT_MOST_ONCE"
    }, {
      "name" : "shouldRetry",
      "value" : true
    }, {
      "name" : "retryAttempts",
      "value" : -1
    }, {
      "name" : "notifyOnStates",
      "value" : [ "RUN_ERROR", "START_ERROR", "STOP_ERROR", "RUNNING_ERROR", "RUNNING", "STOPPED", "FINISHED", "DISCONNECTED", "CONNECTING" ]
    }, {
      "name" : "emailIDs",
      "value" : [ ]
    }, {
      "name" : "constants",
      "value" : [ {
        "key" : "TOKEN",
        "value" : "correct_token"
      }, {
        "key" : "PROTOCOL",
        "value" : "anodot30"
      }, {
        "key" : "ANODOT_BASE_URL",
        "value" : "http://dummy_destination"
      }, {
        "key" : "AGENT_URL",
        "value" : "http://anodot-agent"
      }, {
        "key" : "SCHEMA_ID",
        "value" : "test_influx2-1234"
      } ]
    }, {
      "name" : "errorRecordPolicy",
      "value" : "ORIGINAL_RECORD"
    }, {
      "name" : "workerCount",
      "value" : 0
    }, {
      "name" : "clusterSlaveMemory",
      "value" : 2048
    }, {
      "name" : "clusterSlaveJavaOpts",
      "value" : "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Dlog4j.debug"
    }, {
      "name" : "clusterLauncherEnv",
      "value" : [ ]
    }, {
      "name" : "mesosDispatcherURL",
      "value" : null
    }, {
      "name" : "logLevel",
      "value" : "INFO"
    }, {
      "name" : "hdfsS3ConfDir",
      "value" : null
    }, {
      "name" : "rateLimit",
      "value" : 0
    }, {
      "name" : "maxRunners",
      "value" : 0
    }, {
      "name" : "shouldCreateFailureSnapshot",
      "value" : true
    }, {
      "name" : "runnerIdleTIme",
      "value" : 60
    }, {
      "name" : "webhookConfigs",
      "value" : [ {
        "payload" : "{\n  \"pipeline_status\": \"{{PIPELINE_STATE}}\"\n }",
        "headers" : [ ],
        "httpMethod" : "POST",
        "contentType" : "application/json",
        "authType" : "NONE",
        "webhookUrl" : "${AGENT_URL}/pipeline-status-change/${pipeline:id()}"
      } ]
    }, {
      "name" : "sparkConfigs",
      "value" : [ ]
    }, {
      "name" : "amazonEMRConfig.userRegion",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.userRegionCustom",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.accessKey",
      "value" : ""
    }, {
      "name" : "amazonEMRConfig.secretKey",
      "value" : ""
    }, {
      "name" : "amazonEMRConfig.s3StagingUri",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.provisionNewCluster",
      "value" : false
    }, {
      "name" : "amazonEMRConfig.clusterId",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "amazonEMRConfig.loggingEnabled",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.s3LogUri",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.enableEMRDebugging",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.serviceRole",
      "value" : "EMR_DefaultRole"
    }, {
      "name" : "amazonEMRConfig.jobFlowRole",
      "value" : "EMR_EC2_DefaultRole"
    }, {
      "name" : "amazonEMRConfig.visibleToAllUsers",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.ec2SubnetId",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.masterSecurityGroup",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveSecurityGroup",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.instanceCount",
      "value" : 2
    }, {
      "name" : "amazonEMRConfig.masterInstanceType",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.masterInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveInstanceType",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "clusterConfig.clusterType",
      "value" : "LOCAL"
    }, {
      "name" : "clusterConfig.sparkMasterUrl",
      "value" : "local[*]"
    }, {
      "name" : "clusterConfig.deployMode",
      "value" : "CLIENT"
    }, {
      "name" : "clusterConfig.hadoopUserName",
      "value" : "hdfs"
    }, {
      "name" : "clusterConfig.stagingDir",
      "value" : "/streamsets"
    }, {
      "name" : "databricksConfig.baseUrl",
      "value" : null
    }, {
      "name" : "databricksConfig.credentialType",
      "value" : null
    }, {
      "name" : "databricksConfig.username",
      "value" : ""
    }, {
      "name" : "databricksConfig.password",
      "value" : ""
    }, {
      "name" : "databricksConfig.token",
      "value" : ""
    }, {
      "name" : "databricksConfig.clusterConfig",
      "value" : "{\n    \"num_workers\": 8,\n    \"spark_version\": \"5.3.x-scala2.11\",\n    \"node_type_id\": \"i3.xlarge\"\n}"
    }, {
      "name" : "livyConfig.baseUrl",
      "value" : null
    }, {
      "name" : "livyConfig.username",
      "value" : ""
    }, {
      "name" : "livyConfig.password",
      "value" : ""
    }, {
      "name" : "databricksConfig.provisionNewCluster",
      "value" : true
    }, {
      "name" : "databricksConfig.clusterId",
      "value" : null
    }, {
      "name" : "databricksConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "ludicrousMode",
      "value" : false
    }, {
      "name" : "ludicrousModeInputCount",
      "value" : false
    }, {
      "name" : "advancedErrorHandling",
      "value" : false
    }, {
      "name" : "triggerInterval",
      "value" : 2000
    }, {
      "name" : "preprocessScript",
      "value" : ""
    }, {
      "name" : "transformerEMRConfig.userRegion",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.userRegionCustom",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.s3StagingUri",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.clusterId",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "transformerEMRConfig.s3LogUri",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.serviceRole",
      "value" : "EMR_DefaultRole"
    }, {
      "name" : "transformerEMRConfig.jobFlowRole",
      "value" : "EMR_EC2_DefaultRole"
    }, {
      "name" : "transformerEMRConfig.visibleToAllUsers",
      "value" : true
    }, {
      "name" : "transformerEMRConfig.loggingEnabled",
      "value" : true
    }, {
      "name" : "transformerEMRConfig.ec2SubnetId",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.masterSecurityGroup",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.slaveSecurityGroup",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.instanceCount",
      "value" : 2
    }, {
      "name" : "transformerEMRConfig.masterInstanceType",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.slaveInstanceType",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.masterInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.slaveInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.accessKey",
      "value" : ""
    }, {
      "name" : "transformerEMRConfig.secretKey",
      "value" : ""
    }, {
      "name" : "transformerEMRConfig.provisionNewCluster",
      "value" : false
    }, {
      "name" : "transformerEMRConfig.useIAMRoles",
      "value" : false
    }, {
      "name" : "clusterConfig.callbackUrl",
      "value" : null
    }, {
      "name" : "clusterConfig.sparkAppName",
      "value" : "${pipeline:title()}"
    }, {
      "name" : "clusterConfig.useYarnKerberosKeytab",
      "value" : false
    }, {
      "name" : "clusterConfig.yarnKerberosKeytabSource",
      "value" : "PROPERTIES_FILE"
    }, {
      "name" : "clusterConfig.yarnKerberosKeytab",
      "value" : null
    }, {
      "name" : "clusterConfig.yarnKerberosPrincipal",
      "value" : "name@DOMAIN"
    }, {
      "name" : "transformerEMRConfig.emrVersion",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.serviceAccessSecurityGroup",
      "value" : null
    }, {
      "name" : "googleCloudConfig.region",
      "value" : null
    }, {
      "name" : "googleCloudConfig.customRegion",
      "value" : null
    }, {
      "name" : "googleCloudConfig.gcsStagingUri",
      "value" : null
    }, {
      "name" : "googleCloudConfig.create",
      "value" : false
    }, {
      "name" : "googleCloudConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "googleCloudConfig.version",
      "value" : "1.4-ubuntu18"
    }, {
      "name" : "googleCloudConfig.masterType",
      "value" : null
    }, {
      "name" : "googleCloudConfig.workerType",
      "value" : null
    }, {
      "name" : "googleCloudConfig.networkType",
      "value" : null
    }, {
      "name" : "googleCloudConfig.network",
      "value" : null
    }, {
      "name" : "googleCloudConfig.subnet",
      "value" : null
    }, {
      "name" : "googleCloudConfig.tags",
      "value" : [ ]
    }, {
      "name" : "googleCloudConfig.workerCount",
      "value" : 2
    }, {
      "name" : "googleCloudConfig.clusterName",
      "value" : null
    }, {
      "name" : "googleCloudConfig.terminate",
      "value" : false
    }, {
      "name" : "googleCloudCredentialsConfig.projectId",
      "value" : null
    }, {
      "name" : "googleCloudCredentialsConfig.credentialsProvider",
      "value" : null
    }, {
      "name" : "googleCloudCredentialsConfig.path",
      "value" : null
    }, {
      "name" : "googleCloudCredentialsConfig.credentialsFileContent",
      "value" : null
    }, {
      "name" : "badRecordsHandling",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "statsAggregatorStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget::1"
    }, {
      "name" : "startEventStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "stopEventStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "testOriginStage",
      "value" : "streamsets-datacollector-dev-lib::com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource::3"
    }, {
      "name" : "clusterConfig.yarnKerberosKeytabBase64Bytes",
      "value" : null
    } ],
    "uiInfo" : {
      "displayMode" : "ADVANCED",
      "previewConfig" : {
        "previewSource" : "CONFIGURED_SOURCE",
        "batchSize" : "100",
        "timeout" : 30000,
        "writeToDestinations" : false,
        "executeLifecycleEvents" : false,
        "showHeader" : false,
        "showFieldType" : true,
        "rememberMe" : false
      }
    },
    "fragments" : [ ],
    "stages" : [ {
      "instanceName" : "source",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_origin_jython_JythonDSource",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "script",
        "value" : "global sdc\n\ntry:\n    sdc.importLock()\n    import time\n    from datetime import datetime, timedelta\n    import sys\n    import os\n    sys.path.append(os.path.join(os.environ['SDC_DIST'], 'python-libs'))\n    import requests\nfinally:\n    sdc.importUnlock()\n\n\ndef get_interval():\n    return int(sdc.userParams['INTERVAL_IN_SECONDS'])\n\n\ndef get_now_with_delay():\n    return int(time.time()) - int(sdc.userParams['DELAY_IN_SECONDS'])\n\n\ndef to_timestamp(date):\n    epoch = datetime(1970, 1, 1)\n    return int((date - epoch).total_seconds())\n\n\ndef _filter(list_):\n    return list(filter(lambda x: bool(x), list_))\n\n\ndef csv_to_json(csv_data, last_timestamp):\n    if not str(csv_data).strip():\n        return []\n    results = _filter(csv_data.split('\\r\\n\\r\\n'))\n    data = []\n    for result in results:\n        rows = result.split('\\r\\n')\n        header = _filter(rows.pop(0).split(','))\n        for row in rows:\n            rec = dict(zip(header, _filter(row.split(','))))\n            rec['last_timestamp'] = last_timestamp\n            data.append(rec)\n    return data\n\n\nentityName = ''\ninterval = timedelta(seconds=get_interval())\n\nif sdc.lastOffsets.containsKey(entityName):\n    offset = int(float(sdc.lastOffsets.get(entityName)))\nelif sdc.userParams['INITIAL_OFFSET']:\n    offset = to_timestamp(datetime.strptime(sdc.userParams['INITIAL_OFFSET'], '%d/%m/%Y %H:%M'))\nelse:\n    offset = to_timestamp(datetime.utcnow().replace(second=0, microsecond=0) - interval)\n\nsdc.log.info('OFFSET: ' + str(offset))\n\nwhile True:\n    if sdc.isStopped():\n        break\n    now_with_delay = get_now_with_delay() - interval.total_seconds()\n    if offset > now_with_delay:\n        time.sleep(offset - now_with_delay)\n    start = int(offset)\n    stop = int(offset + interval.total_seconds())\n\n    session = requests.Session()\n    session.headers = sdc.userParams['HEADERS']\n    res = session.post(\n        sdc.userParams['URL'],\n        data=sdc.userParams['DATA'].format(\n            start, stop\n        )\n    )\n    res.raise_for_status()\n\n    cur_batch = sdc.createBatch()\n    for obj in csv_to_json(res.text, int(offset)):\n        record = sdc.createRecord('record created ' + str(datetime.now()))\n        record.value = obj\n        cur_batch.add(record)\n        if cur_batch.size() == sdc.batchSize:\n            cur_batch.process(entityName, str(offset))\n            cur_batch = sdc.createBatch()\n            if sdc.isStopped():\n                break\n    cur_batch.process(entityName, str(offset))\n    offset += interval.total_seconds()\n"
      }, {
        "name" : "scriptConf.batchSize",
        "value" : 1000
      }, {
        "name" : "scriptConf.numThreads",
        "value" : 1
      }, {
        "name" : "scriptConf.scriptRecordType",
        "value" : "NATIVE_OBJECTS"
      }, {
        "name" : "scriptConf.params",
        "value" : [ {
          "key" : "INITIAL_OFFSET",
          "value" : "10/03/2019 12:53"
        }, {
          "key" : "INTERVAL_IN_SECONDS",
          "value" : "1200000"
        }, {
          "key" : "DELAY_IN_SECONDS",
          "value" : "0"
        }, {
          "key" : "URL",
          "value" : "http://influx2:8086/api/v2/query?org=test"
        }, {
          "key" : "HEADERS",
          "value" : {
            "Authorization" : "Token token",
            "Accept" : "application/csv",
            "Content-type" : "application/vnd.flux"
          }
        }, {
          "key" : "DATA",
          "value" : "from(bucket:\"test\") |> range(start: {}, stop: {}) |> filter(fn: (r) => r._measurement == \"cpu_test\")"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      } ],
      "uiInfo" : {
        "yPos" : 119.74232482910156,
        "stageType" : "SOURCE",
        "icon" : "jython.png",
        "description" : "",
        "label" : "Jython Scripting 1",
        "xPos" : 178.30101013183594,
        "displayMode" : "ADVANCED"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "JythonScripting_01OutputLane16013726491540" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "jython_transform_records",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "initScript",
        "value" : ""
      }, {
        "name" : "script",
        "value" : "global sdc\n\ntry:\n    sdc.importLock()\n    import sys\n    import os\n    import collections\n\n    sys.path.append(os.path.join(os.environ['SDC_DIST'], 'python-libs'))\n\n    from datetime import datetime\nfinally:\n    sdc.importUnlock()\n\nDATEFORMAT = '%Y-%m-%dT%H:%M:%S.%fZ'\n\n\ndef to_timestamp(date):\n    epoch = datetime(1970, 1, 1)\n    return (date - epoch).total_seconds()\n\n\nrecords = {}\nfor record in sdc.records:\n    # * 1000 because of strange implementaion of 'Add tags and static dimensions', it will divide by 1000 later\n    timestamp = to_timestamp(datetime.strptime(record.value[sdc.userParams['TIMESTAMP_COLUMN']], DATEFORMAT)) * 1000\n    if timestamp in records:\n        r = records[timestamp]\n        r[record.value['_field']] = record.value['_value']\n        continue\n    record.value[record.value['_field']] = record.value['_value']\n    record.value[sdc.userParams['TIMESTAMP_COLUMN']] = timestamp\n    records[timestamp] = record.value\n\nrecords = sorted(records.items(), key=lambda x: x[1][sdc.userParams['TIMESTAMP_COLUMN']])\nrecords = collections.OrderedDict(records)\n\nfor timestamp, obj in records.items():\n    record = sdc.createRecord('record created ' + str(timestamp))\n    record.value = obj\n    sdc.output.write(record)"
      }, {
        "name" : "destroyScript",
        "value" : ""
      }, {
        "name" : "scriptRecordType",
        "value" : "NATIVE_OBJECTS"
      }, {
        "name" : "userParams",
        "value" : [ {
          "key" : "TIMESTAMP_COLUMN",
          "value" : "_time"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 120.60215759277344,
        "stageType" : "PROCESSOR",
        "icon" : "jython.png",
        "description" : "",
        "label" : "Transform records",
        "xPos" : 373.2177276611328,
        "displayMode" : "ADVANCED"
      },
      "inputLanes" : [ "JythonScripting_01OutputLane16013726491540" ],
      "outputLanes" : [ "JythonEvaluator_01OutputLane16282574993230" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "filtering",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "expressionProcessorConfigs",
        "value" : [ ]
      }, {
        "name" : "headerAttributeConfigs",
        "value" : [ ]
      }, {
        "name" : "fieldAttributeConfigs",
        "value" : [ ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 121.82936096191406,
        "stageType" : "PROCESSOR",
        "icon" : "expression.png",
        "description" : "",
        "label" : "Transformations",
        "xPos" : 564.3009948730469,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "JythonEvaluator_01OutputLane16282574993230" ],
      "outputLanes" : [ "ExpressionEvaluator_03OutputLane16436446664970" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "js_create_metrics",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_javascript_JavaScriptDProcessor",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "initScript",
        "value" : "state['TIMESTAMP_COLUMN'] = '_time';\nstate['DIMENSIONS'] = ['zone', 'cpu'];\nstate['DIMENSIONS_NAMES'] = ['zone', 'cpu'];\nstate['VALUES_COLUMNS'] = ['usage_idle'];\nstate['MEASUREMENT_NAMES'] = ['usage_idle'];\nstate['TARGET_TYPES'] = ['gauge'];\nstate['COUNT_RECORDS'] = 0;\nstate['COUNT_RECORDS_MEASUREMENT_NAME'] = 'count';\nstate['STATIC_WHAT'] = 1;\nstate['VALUES_ARRAY_PATH'] = '';\nstate['VALUES_ARRAY_FILTER'] = [];\nstate['INTERVAL'] = 1200000;\nstate['HEADER_ATTRIBUTES'] = [];\nstate['metrics'] = {}"
      }, {
        "name" : "script",
        "value" : "function extract_value(object, path) {\n  path_parts = path.split('/')\n  for (var k = 0; k < path_parts.length; k++) {\n    object = object[path_parts[k]]\n    if (object === null) {\n      return null;\n    }\n  }\n  if (object === null) {\n    return 'NULL';\n  }\n  return object\n}\n\n\nfunction replace_illegal_chars(str) {\n    return str.replace(/[\\. \\<]+/g, '_')\n}\n\nfunction get_measurement_name(record, value_idx) {\n    // if (!state['STATIC_WHAT']) {\n    //     var meas_name = extract_value(record, state['MEASUREMENT_NAMES'][value_idx])\n    //     if (typeof meas_name !== 'string') {\n    //         throw state['MEASUREMENT_NAMES'][value_idx] + ' property should be string instead of ' + (typeof meas_name)\n    //     }\n    //     return replace_illegal_chars(meas_name);\n    // }\n    return state['MEASUREMENT_NAMES'][value_idx]\n}\n\nfunction get_dimensions(record) {\n    var dimensions = {};\n    for (var j = 0; j < state['DIMENSIONS'].length; j++) {\n        var dimension = extract_value(record.value, replace_illegal_chars(state['DIMENSIONS'][j]))\n        if (dimension === null) {\n            continue;\n        }\n        dimension = String(dimension).trim()\n        if (dimension === '') {\n            continue;\n        }\n        var dimension_name = replace_illegal_chars(state['DIMENSIONS_NAMES'][j]).replace(/[\\/]+/g, '_')\n        dimensions[dimension_name] = replace_illegal_chars(dimension)\n    }\n\n    for (var k = 0; k < state['HEADER_ATTRIBUTES'].length; k++) {\n        var attribute_value = record.attributes[state['HEADER_ATTRIBUTES'][k]]\n        if (attribute_value === null) {\n            continue;\n        }\n        attribute_value = String(attribute_value).trim()\n        if (attribute_value === '') {\n            continue;\n        }\n        dimensions[replace_illegal_chars(state['HEADER_ATTRIBUTES'][k])] = replace_illegal_chars(attribute_value)\n    }\n    return dimensions\n}\n\nfunction get_measurements(record) {\n    var measurements = {}\n    for (var j = 0; j < state['VALUES_COLUMNS'].length; j++) {\n        var value = extract_value(record, state['VALUES_COLUMNS'][j]);\n        if (value === null || value === '' || isNaN(value)) {\n            continue;\n        }\n        if (typeof value === 'string' || value instanceof String) {\n            value = parseFloat(value)\n        }\n        var measurement = get_measurement_name(record, j);\n\n        measurements[measurement] = value;\n    }\n    if (state['COUNT_RECORDS']) {\n        measurements[state['COUNT_RECORDS_MEASUREMENT_NAME']] = 1;\n    }\n    return measurements\n}\n\n\nfor (var i = 0; i < records.length; i++) {\n\n    try {\n        var timestamp = extract_value(records[i].value, state['TIMESTAMP_COLUMN'])\n        if (timestamp === null) {\n            continue;\n        }\n        timestamp = parseInt(timestamp)\n        var measurements = get_measurements(records[i].value)\n        if (JSON.stringify(measurements) === JSON.stringify({})) {\n            continue;\n        }\n        var newRecord = sdcFunctions.createRecord(i);\n        newRecord.value = {\n            'timestamp': timestamp,\n            'dimensions': get_dimensions(records[i]),\n            'measurements': measurements,\n            'schemaId': \"${SCHEMA_ID}\"\n        };\n        output.write(newRecord);\n    } catch (e) {\n        error.write(records[i], e);\n    }\n}\n\nif (records.length > 0 && extract_value(records[0].value, state['TIMESTAMP_COLUMN'])) {\n  event = sdc.createEvent('interval processed', 1);\n  event.value = {\n    'watermark': records[0].value['last_timestamp'] + state['INTERVAL'] ,\n  };\n  sdc.toEvent(event);\n}"
      }, {
        "name" : "destroyScript",
        "value" : ""
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ "/_time" ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      }, {
        "name" : "scriptRecordType",
        "value" : "NATIVE_OBJECTS"
      }, {
        "name" : "userParams",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 121.00569915771484,
        "stageType" : "PROCESSOR",
        "description" : "",
        "label" : "Create metrics",
        "xPos" : 746.8220520019531,
        "displayMode" : "ADVANCED"
      },
      "inputLanes" : [ "ExpressionEvaluator_03OutputLane16436446664970" ],
      "outputLanes" : [ "destination_OutputLane" ],
      "eventLanes" : [ "transform_records_EventLane" ],
      "services" : [ ]
    }, {
      "instanceName" : "ExpressionEvaluator_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "expressionProcessorConfigs",
        "value" : [ {
          "fieldToSet" : "/schemaId",
          "expression" : "${SCHEMA_ID}"
        } ]
      }, {
        "name" : "headerAttributeConfigs",
        "value" : [ { } ]
      }, {
        "name" : "fieldAttributeConfigs",
        "value" : [ {
          "fieldToSet" : "/"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 257.8929672241211,
        "stageType" : "PROCESSOR",
        "icon" : "expression.png",
        "description" : "",
        "label" : "Add schema ID",
        "xPos" : 881.8640441894531,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "transform_records_EventLane" ],
      "outputLanes" : [ "ExpressionEvaluator_01OutputLane16213399946710" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "ExpressionEvaluator_02",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "expressionProcessorConfigs",
        "value" : [ {
          "fieldToSet" : "/tags",
          "expression" : "${emptyMap()}"
        }, {
          "fieldToSet" : "/tags/source",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/source[0]",
          "expression" : "${\"anodot-agent\"}"
        }, {
          "fieldToSet" : "/tags/source_host_id",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/source_host_id[0]",
          "expression" : "${\"ABCDEF\"}"
        }, {
          "fieldToSet" : "/tags/source_host_name",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/source_host_name[0]",
          "expression" : "${\"agent\"}"
        }, {
          "fieldToSet" : "/tags/pipeline_id",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/pipeline_id[0]",
          "expression" : "${\"test_influx2\"}"
        }, {
          "fieldToSet" : "/tags/pipeline_type",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/pipeline_type[0]",
          "expression" : "${\"influx2\"}"
        }, {
          "fieldToSet" : "/timestamp",
          "expression" : "${record:value('/timestamp')/1000}"
        } ]
      }, {
        "name" : "headerAttributeConfigs",
        "value" : [ { } ]
      }, {
        "name" : "fieldAttributeConfigs",
        "value" : [ {
          "fieldToSet" : "/"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 118.00569915771484,
        "stageType" : "PROCESSOR",
        "icon" : "expression.png",
        "description" : "",
        "label" : "Add tags and static dimensions",
        "xPos" : 960.8220520019531,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "destination_OutputLane" ],
      "outputLanes" : [ "ExpressionEvaluator_02OutputLane16215134030410" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "FieldTypeConverter_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_fieldtypeconverter_FieldTypeConverterDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "convertBy",
        "value" : "BY_FIELD"
      }, {
        "name" : "fieldTypeConverterConfigs",
        "value" : [ {
          "fields" : [ "/timestamp" ],
          "targetType" : "INTEGER",
          "treatInputFieldAsDate" : false,
          "dataLocale" : "en,US",
          "scale" : -1,
          "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
          "dateFormat" : "YYYY_MM_DD",
          "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
          "encoding" : "UTF-8"
        } ]
      }, {
        "name" : "wholeTypeConverterConfigs",
        "value" : [ {
          "sourceType" : "INTEGER",
          "targetType" : "INTEGER",
          "treatInputFieldAsDate" : false,
          "dataLocale" : "en,US",
          "scale" : -1,
          "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
          "dateFormat" : "YYYY_MM_DD",
          "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
          "encoding" : "UTF-8"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 116,
        "stageType" : "PROCESSOR",
        "icon" : "converter.png",
        "description" : "",
        "label" : "Convert timestamp to int",
        "xPos" : 1154,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "ExpressionEvaluator_02OutputLane16215134030410" ],
      "outputLanes" : [ "FieldTypeConverter_01OutputLane16291201944360" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "destination",
      "library" : "anodot",
      "stageName" : "anodot_stage_destination_AnodotDTarget",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "conf.dataGeneratorFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "conf.agentOffsetUrl",
        "value" : "http://anodot-agent/pipeline-offset/${pipeline:id()}"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvHeader",
        "value" : "NO_HEADER"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLines",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLinesString",
        "value" : " "
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "conf.dataGeneratorFormatConfig.jsonMode",
        "value" : "ARRAY_OBJECTS"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldPath",
        "value" : "/text"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textRecordSeparator",
        "value" : "\\n"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldMissingAction",
        "value" : "ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textEmptyLineIfNull",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchemaSource",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.registerSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrlsForRegistration",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrls",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaLookupMode",
        "value" : "SUBJECT"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subject",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subjectToRegister",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaId",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeSchema",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroCompression",
        "value" : "NULL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.binaryFieldPath",
        "value" : "/"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.fileNameEL",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.wholeFileExistsAction",
        "value" : "TO_ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeChecksumInTheEvents",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.checksumAlgorithm",
        "value" : "MD5"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlPrettyPrint",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlValidateSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlSchema",
        "value" : null
      }, {
        "name" : "conf.dataFormat",
        "value" : "JSON"
      }, {
        "name" : "conf.resourceUrl",
        "value" : "${ANODOT_BASE_URL}/api/v1/metrics?token=${TOKEN}&protocol=${PROTOCOL}"
      }, {
        "name" : "conf.headers",
        "value" : [ ]
      }, {
        "name" : "conf.httpMethod",
        "value" : "POST"
      }, {
        "name" : "conf.methodExpression",
        "value" : null
      }, {
        "name" : "conf.client.transferEncoding",
        "value" : "BUFFERED"
      }, {
        "name" : "conf.client.httpCompression",
        "value" : "NONE"
      }, {
        "name" : "conf.client.connectTimeoutMillis",
        "value" : 300000
      }, {
        "name" : "conf.client.readTimeoutMillis",
        "value" : 300000
      }, {
        "name" : "conf.client.numThreads",
        "value" : 1
      }, {
        "name" : "conf.client.authType",
        "value" : "NONE"
      }, {
        "name" : "conf.client.useOAuth2",
        "value" : false
      }, {
        "name" : "conf.client.oauth.consumerKey",
        "value" : ""
      }, {
        "name" : "conf.client.oauth.consumerSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth.token",
        "value" : ""
      }, {
        "name" : "conf.client.oauth.tokenSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.credentialsGrantType",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.tokenUrl",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.clientId",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.clientSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.username",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.password",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.resourceOwnerClientId",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.resourceOwnerClientSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.algorithm",
        "value" : "NONE"
      }, {
        "name" : "conf.client.oauth2.key",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.jwtClaims",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.transferEncoding",
        "value" : "BUFFERED"
      }, {
        "name" : "conf.client.oauth2.additionalValues",
        "value" : [ { } ]
      }, {
        "name" : "conf.client.basicAuth.username",
        "value" : ""
      }, {
        "name" : "conf.client.basicAuth.password",
        "value" : ""
      }, {
        "name" : "conf.client.useProxy",
        "value" : true
      }, {
        "name" : "conf.client.proxy.uri",
        "value" : "http://squid:3128"
      }, {
        "name" : "conf.client.proxy.username",
        "value" : ""
      }, {
        "name" : "conf.client.proxy.password",
        "value" : ""
      }, {
        "name" : "conf.client.tlsConfig.tlsEnabled",
        "value" : false
      }, {
        "name" : "conf.client.tlsConfig.keyStoreFilePath",
        "value" : "/opt/jdk/jre/lib/security/cacerts"
      }, {
        "name" : "conf.client.tlsConfig.keyStoreType",
        "value" : "JKS"
      }, {
        "name" : "conf.client.tlsConfig.keyStorePassword",
        "value" : ""
      }, {
        "name" : "conf.client.tlsConfig.keyStoreAlgorithm",
        "value" : "SunX509"
      }, {
        "name" : "conf.client.tlsConfig.trustStoreFilePath",
        "value" : "/opt/jdk/jre/lib/security/cacerts"
      }, {
        "name" : "conf.client.tlsConfig.trustStoreType",
        "value" : "JKS"
      }, {
        "name" : "conf.client.tlsConfig.trustStorePassword",
        "value" : ""
      }, {
        "name" : "conf.client.tlsConfig.trustStoreAlgorithm",
        "value" : "SunX509"
      }, {
        "name" : "conf.client.tlsConfig.useDefaultProtocols",
        "value" : true
      }, {
        "name" : "conf.client.tlsConfig.protocols",
        "value" : [ ]
      }, {
        "name" : "conf.client.tlsConfig.useDefaultCiperSuites",
        "value" : true
      }, {
        "name" : "conf.client.tlsConfig.cipherSuites",
        "value" : [ ]
      }, {
        "name" : "conf.client.requestLoggingConfig.enableRequestLogging",
        "value" : false
      }, {
        "name" : "conf.client.requestLoggingConfig.logLevel",
        "value" : "INFO"
      }, {
        "name" : "conf.client.requestLoggingConfig.verbosity",
        "value" : "PAYLOAD_ANY"
      }, {
        "name" : "conf.client.requestLoggingConfig.maxEntitySize",
        "value" : 1000
      }, {
        "name" : "conf.singleRequestPerBatch",
        "value" : false
      }, {
        "name" : "conf.rateLimit",
        "value" : 0
      }, {
        "name" : "conf.maxRequestCompletionSecs",
        "value" : 60
      }, {
        "name" : "conf.responseConf.sendResponseToOrigin",
        "value" : false
      }, {
        "name" : "conf.responseConf.responseType",
        "value" : "SUCCESS_RECORDS"
      }, {
        "name" : "stageOnRecordError",
        "value" : "DISCARD"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvQuoteMode",
        "value" : "MINIMAL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.basicAuthUserInfo",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.basicAuthUserInfoForRegistration",
        "value" : null
      }, {
        "name" : "conf.parallelSendersNumber",
        "value" : 1
      }, {
        "name" : "conf.maxBatchSize",
        "value" : 1000
      }, {
        "name" : "conf.propertiesPath",
        "value" : null
      }, {
        "name" : "conf.partitioningKeyPath",
        "value" : null
      }, {
        "name" : "conf.maxSendResponseWait",
        "value" : 60000
      } ],
      "uiInfo" : {
        "yPos" : 117.64195251464844,
        "stageType" : "TARGET",
        "description" : "",
        "label" : "Send Records To Anodot",
        "xPos" : 1348.6775512695312,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "FieldTypeConverter_01OutputLane16291201944360" ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "FieldTypeConverter_02",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_fieldtypeconverter_FieldTypeConverterDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "convertBy",
        "value" : "BY_FIELD"
      }, {
        "name" : "fieldTypeConverterConfigs",
        "value" : [ {
          "fields" : [ "/watermark" ],
          "targetType" : "INTEGER",
          "treatInputFieldAsDate" : false,
          "dataLocale" : "en,US",
          "scale" : -1,
          "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
          "dateFormat" : "YYYY_MM_DD",
          "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
          "encoding" : "UTF-8"
        } ]
      }, {
        "name" : "wholeTypeConverterConfigs",
        "value" : [ {
          "sourceType" : "INTEGER",
          "targetType" : "INTEGER",
          "treatInputFieldAsDate" : false,
          "dataLocale" : "en,US",
          "scale" : -1,
          "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
          "dateFormat" : "YYYY_MM_DD",
          "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
          "encoding" : "UTF-8"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 258,
        "stageType" : "PROCESSOR",
        "icon" : "converter.png",
        "description" : "",
        "label" : "Convert watermark to int",
        "xPos" : 1087,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "ExpressionEvaluator_01OutputLane16213399946710" ],
      "outputLanes" : [ "FieldTypeConverter_02OutputLane16291202248010" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "AnodotDestination_01",
      "library" : "anodot",
      "stageName" : "anodot_stage_destination_AnodotDTarget",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "conf.resourceUrl",
        "value" : "${ANODOT_BASE_URL}/api/v1/metrics/watermark?token=${TOKEN}&protocol=${PROTOCOL}"
      }, {
        "name" : "conf.dataFormat",
        "value" : "JSON"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvHeader",
        "value" : "NO_HEADER"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLines",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLinesString",
        "value" : " "
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvQuoteMode",
        "value" : "MINIMAL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.jsonMode",
        "value" : "MULTIPLE_OBJECTS"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldPath",
        "value" : "/text"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textRecordSeparator",
        "value" : "\\n"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldMissingAction",
        "value" : "ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textEmptyLineIfNull",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchemaSource",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.registerSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrlsForRegistration",
        "value" : [ "" ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrls",
        "value" : [ "" ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.basicAuthUserInfo",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaLookupMode",
        "value" : "SUBJECT"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subject",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subjectToRegister",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.basicAuthUserInfoForRegistration",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaId",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeSchema",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroCompression",
        "value" : "NULL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.binaryFieldPath",
        "value" : "/"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.fileNameEL",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.wholeFileExistsAction",
        "value" : "TO_ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeChecksumInTheEvents",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.checksumAlgorithm",
        "value" : "MD5"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlPrettyPrint",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlValidateSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlSchema",
        "value" : null
      }, {
        "name" : "conf.client.transferEncoding",
        "value" : "BUFFERED"
      }, {
        "name" : "conf.client.httpCompression",
        "value" : "NONE"
      }, {
        "name" : "conf.client.connectTimeoutMillis",
        "value" : 0
      }, {
        "name" : "conf.client.readTimeoutMillis",
        "value" : 0
      }, {
        "name" : "conf.client.numThreads",
        "value" : 1
      }, {
        "name" : "conf.client.authType",
        "value" : "NONE"
      }, {
        "name" : "conf.client.useOAuth2",
        "value" : false
      }, {
        "name" : "conf.client.oauth.consumerKey",
        "value" : null
      }, {
        "name" : "conf.client.oauth.consumerSecret",
        "value" : null
      }, {
        "name" : "conf.client.oauth.token",
        "value" : null
      }, {
        "name" : "conf.client.oauth.tokenSecret",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.credentialsGrantType",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.tokenUrl",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.clientId",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.clientSecret",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.username",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.password",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.resourceOwnerClientId",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.resourceOwnerClientSecret",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.algorithm",
        "value" : "NONE"
      }, {
        "name" : "conf.client.oauth2.key",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.jwtClaims",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.transferEncoding",
        "value" : "BUFFERED"
      }, {
        "name" : "conf.client.oauth2.additionalValues",
        "value" : [ { } ]
      }, {
        "name" : "conf.client.basicAuth.username",
        "value" : null
      }, {
        "name" : "conf.client.basicAuth.password",
        "value" : null
      }, {
        "name" : "conf.client.useProxy",
        "value" : false
      }, {
        "name" : "conf.client.proxy.uri",
        "value" : null
      }, {
        "name" : "conf.client.proxy.username",
        "value" : null
      }, {
        "name" : "conf.client.proxy.password",
        "value" : null
      }, {
        "name" : "conf.client.tlsConfig.tlsEnabled",
        "value" : false
      }, {
        "name" : "conf.client.tlsConfig.keyStoreFilePath",
        "value" : null
      }, {
        "name" : "conf.client.tlsConfig.keyStoreType",
        "value" : "JKS"
      }, {
        "name" : "conf.client.tlsConfig.keyStorePassword",
        "value" : null
      }, {
        "name" : "conf.client.tlsConfig.keyStoreAlgorithm",
        "value" : "SunX509"
      }, {
        "name" : "conf.client.tlsConfig.trustStoreFilePath",
        "value" : null
      }, {
        "name" : "conf.client.tlsConfig.trustStoreType",
        "value" : "JKS"
      }, {
        "name" : "conf.client.tlsConfig.trustStorePassword",
        "value" : null
      }, {
        "name" : "conf.client.tlsConfig.trustStoreAlgorithm",
        "value" : "SunX509"
      }, {
        "name" : "conf.client.tlsConfig.useDefaultProtocols",
        "value" : true
      }, {
        "name" : "conf.client.tlsConfig.protocols",
        "value" : [ ]
      }, {
        "name" : "conf.client.tlsConfig.useDefaultCiperSuites",
        "value" : true
      }, {
        "name" : "conf.client.tlsConfig.cipherSuites",
        "value" : [ ]
      }, {
        "name" : "conf.client.requestLoggingConfig.enableRequestLogging",
        "value" : false
      }, {
        "name" : "conf.client.requestLoggingConfig.logLevel",
        "value" : "FINE"
      }, {
        "name" : "conf.client.requestLoggingConfig.verbosity",
        "value" : "HEADERS_ONLY"
      }, {
        "name" : "conf.client.requestLoggingConfig.maxEntitySize",
        "value" : 0
      }, {
        "name" : "conf.headers",
        "value" : [ ]
      }, {
        "name" : "conf.httpMethod",
        "value" : "POST"
      }, {
        "name" : "conf.methodExpression",
        "value" : null
      }, {
        "name" : "conf.singleRequestPerBatch",
        "value" : true
      }, {
        "name" : "conf.rateLimit",
        "value" : 0
      }, {
        "name" : "conf.maxRequestCompletionSecs",
        "value" : 60
      }, {
        "name" : "conf.responseConf.sendResponseToOrigin",
        "value" : false
      }, {
        "name" : "conf.responseConf.responseType",
        "value" : "SUCCESS_RECORDS"
      }, {
        "name" : "conf.agentOffsetUrl",
        "value" : null
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      }, {
        "name" : "conf.parallelSendersNumber",
        "value" : 1
      }, {
        "name" : "conf.maxBatchSize",
        "value" : 1000
      }, {
        "name" : "conf.propertiesPath",
        "value" : null
      }, {
        "name" : "conf.partitioningKeyPath",
        "value" : null
      }, {
        "name" : "conf.maxSendResponseWait",
        "value" : 60000
      } ],
      "uiInfo" : {
        "yPos" : 258.8929977416992,
        "stageType" : "TARGET",
        "icon" : "anodot_logo.png",
        "description" : "",
        "label" : "Anodot Destination Watermark",
        "xPos" : 1289.4839782714844,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "FieldTypeConverter_02OutputLane16291202248010" ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "errorStage" : {
      "instanceName" : "Discard_ErrorStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Error Records - Discard",
        "xPos" : 563,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    },
    "info" : {
      "pipelineId" : "influx2sc0e533d95-5b42-4930-a313-c1d65f4b2ad6",
      "title" : "influx2_schema",
      "description" : "",
      "created" : 1643644623025,
      "lastModified" : 1643644750148,
      "creator" : "admin",
      "lastModifier" : "admin",
      "lastRev" : "0",
      "uuid" : "51148d92-fa17-4d4b-9fd4-38fd6b9523ff",
      "valid" : true,
      "metadata" : {
        "labels" : [ "influx2", "http" ]
      },
      "name" : "influx2sc0e533d95-5b42-4930-a313-c1d65f4b2ad6",
      "sdcVersion" : "3.18.0",
      "sdcId" : "6870a493-82a5-11ec-b9a4-f737384f346b"
    },
    "metadata" : {
      "labels" : [ "influx2", "http" ]
    },
    "statsAggregatorStage" : {
      "instanceName" : "statsAggregatorStageInstance",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "stageType" : "TARGET",
        "label" : "Stats Aggregator -Write to Control Hub directly"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    },
    "startEventStages" : [ {
      "instanceName" : "Discard_StartEventStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Start Event - Discard",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "stopEventStages" : [ {
      "instanceName" : "Discard_StopEventStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Stop Event - Discard",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "testOriginStage" : {
      "instanceName" : "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStage",
      "library" : "streamsets-datacollector-dev-lib",
      "stageName" : "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "rawData",
        "value" : "{\n  \"f1\": \"abc\",\n  \"f2\": \"xyz\",\n  \"f3\": \"lmn\"\n}"
      }, {
        "name" : "stopAfterFirstBatch",
        "value" : false
      }, {
        "name" : "eventData",
        "value" : null
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      } ],
      "uiInfo" : {
        "stageType" : "SOURCE",
        "label" : "Test Origin - Dev Raw Data Source"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStageOutputLane1" ],
      "eventLanes" : [ ],
      "services" : [ {
        "service" : "com.streamsets.pipeline.api.service.dataformats.DataFormatParserService",
        "serviceVersion" : 2,
        "configuration" : [ {
          "name" : "displayFormats",
          "value" : "DELIMITED,JSON,LOG,SDC_JSON,TEXT,XML"
        }, {
          "name" : "dataFormat",
          "value" : "JSON"
        }, {
          "name" : "dataFormatConfig.compression",
          "value" : "NONE"
        }, {
          "name" : "dataFormatConfig.filePatternInArchive",
          "value" : "*"
        }, {
          "name" : "dataFormatConfig.charset",
          "value" : "UTF-8"
        }, {
          "name" : "dataFormatConfig.removeCtrlChars",
          "value" : false
        }, {
          "name" : "dataFormatConfig.textMaxLineLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.useCustomDelimiter",
          "value" : false
        }, {
          "name" : "dataFormatConfig.customDelimiter",
          "value" : "\\r\\n"
        }, {
          "name" : "dataFormatConfig.includeCustomDelimiterInTheText",
          "value" : false
        }, {
          "name" : "dataFormatConfig.jsonContent",
          "value" : "MULTIPLE_OBJECTS"
        }, {
          "name" : "dataFormatConfig.jsonMaxObjectLen",
          "value" : 4096
        }, {
          "name" : "dataFormatConfig.csvFileFormat",
          "value" : "CSV"
        }, {
          "name" : "dataFormatConfig.csvHeader",
          "value" : "NO_HEADER"
        }, {
          "name" : "dataFormatConfig.csvAllowExtraColumns",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvExtraColumnPrefix",
          "value" : "_extra_"
        }, {
          "name" : "dataFormatConfig.csvMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.csvCustomDelimiter",
          "value" : "|"
        }, {
          "name" : "dataFormatConfig.multiCharacterFieldDelimiter",
          "value" : "||"
        }, {
          "name" : "dataFormatConfig.multiCharacterLineDelimiter",
          "value" : "${str:unescapeJava('\\\\n')}"
        }, {
          "name" : "dataFormatConfig.csvCustomEscape",
          "value" : "\\"
        }, {
          "name" : "dataFormatConfig.csvCustomQuote",
          "value" : "\""
        }, {
          "name" : "dataFormatConfig.csvEnableComments",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvCommentMarker",
          "value" : "#"
        }, {
          "name" : "dataFormatConfig.csvIgnoreEmptyLines",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvRecordType",
          "value" : "LIST_MAP"
        }, {
          "name" : "dataFormatConfig.csvSkipStartLines",
          "value" : 0
        }, {
          "name" : "dataFormatConfig.parseNull",
          "value" : false
        }, {
          "name" : "dataFormatConfig.nullConstant",
          "value" : "\\\\N"
        }, {
          "name" : "dataFormatConfig.xmlRecordElement",
          "value" : null
        }, {
          "name" : "dataFormatConfig.includeFieldXpathAttributes",
          "value" : false
        }, {
          "name" : "dataFormatConfig.xPathNamespaceContext",
          "value" : [ ]
        }, {
          "name" : "dataFormatConfig.outputFieldAttributes",
          "value" : false
        }, {
          "name" : "dataFormatConfig.xmlMaxObjectLen",
          "value" : 4096
        }, {
          "name" : "dataFormatConfig.logMode",
          "value" : "COMMON_LOG_FORMAT"
        }, {
          "name" : "dataFormatConfig.logMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.retainOriginalLine",
          "value" : false
        }, {
          "name" : "dataFormatConfig.customLogFormat",
          "value" : "%h %l %u %t \"%r\" %>s %b"
        }, {
          "name" : "dataFormatConfig.regex",
          "value" : "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
        }, {
          "name" : "dataFormatConfig.fieldPathsToGroupName",
          "value" : [ {
            "fieldPath" : "/",
            "group" : 1
          } ]
        }, {
          "name" : "dataFormatConfig.grokPatternDefinition",
          "value" : null
        }, {
          "name" : "dataFormatConfig.grokPattern",
          "value" : "%{COMMONAPACHELOG}"
        }, {
          "name" : "dataFormatConfig.onParseError",
          "value" : "ERROR"
        }, {
          "name" : "dataFormatConfig.maxStackTraceLines",
          "value" : 50
        }, {
          "name" : "dataFormatConfig.enableLog4jCustomLogFormat",
          "value" : false
        }, {
          "name" : "dataFormatConfig.log4jCustomLogFormat",
          "value" : "%r [%t] %-5p %c %x - %m%n"
        }, {
          "name" : "dataFormatConfig.avroSchemaSource",
          "value" : null
        }, {
          "name" : "dataFormatConfig.avroSchema",
          "value" : null
        }, {
          "name" : "dataFormatConfig.schemaRegistryUrls",
          "value" : [ ]
        }, {
          "name" : "dataFormatConfig.schemaLookupMode",
          "value" : "SUBJECT"
        }, {
          "name" : "dataFormatConfig.subject",
          "value" : null
        }, {
          "name" : "dataFormatConfig.schemaId",
          "value" : null
        }, {
          "name" : "dataFormatConfig.protoDescriptorFile",
          "value" : null
        }, {
          "name" : "dataFormatConfig.messageType",
          "value" : null
        }, {
          "name" : "dataFormatConfig.isDelimited",
          "value" : false
        }, {
          "name" : "dataFormatConfig.binaryMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.datagramMode",
          "value" : "SYSLOG"
        }, {
          "name" : "dataFormatConfig.typesDbPath",
          "value" : null
        }, {
          "name" : "dataFormatConfig.convertTime",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excludeInterval",
          "value" : false
        }, {
          "name" : "dataFormatConfig.authFilePath",
          "value" : null
        }, {
          "name" : "dataFormatConfig.netflowOutputValuesMode",
          "value" : "RAW_AND_INTERPRETED"
        }, {
          "name" : "dataFormatConfig.maxTemplateCacheSize",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.templateCacheTimeoutMs",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.netflowOutputValuesModeDatagram",
          "value" : "RAW_AND_INTERPRETED"
        }, {
          "name" : "dataFormatConfig.maxTemplateCacheSizeDatagram",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.templateCacheTimeoutMsDatagram",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.wholeFileMaxObjectLen",
          "value" : 8192
        }, {
          "name" : "dataFormatConfig.rateLimit",
          "value" : "-1"
        }, {
          "name" : "dataFormatConfig.verifyChecksum",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelHeader",
          "value" : null
        }, {
          "name" : "dataFormatConfig.preserveRootElement",
          "value" : false
        }, {
          "name" : "dataFormatConfig.basicAuth",
          "value" : null
        }, {
          "name" : "dataFormatConfig.avroSkipUnionIndex",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelSkipCellsWithNoHeader",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelReadAllSheets",
          "value" : true
        }, {
          "name" : "dataFormatConfig.excelSheetNames",
          "value" : null
        } ]
      } ]
    },
    "valid" : true,
    "issues" : {
      "pipelineIssues" : [ ],
      "stageIssues" : { },
      "issueCount" : 0
    },
    "previewable" : true
  },
  "pipelineRules" : {
    "schemaVersion" : 3,
    "version" : 2,
    "metricsRuleDefinitions" : [ {
      "id" : "badRecordsAlertID",
      "alertText" : "High incidence of Error Records",
      "metricId" : "pipeline.batchErrorRecords.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1629113109965,
      "valid" : true
    }, {
      "id" : "stageErrorAlertID",
      "alertText" : "High incidence of Stage Errors",
      "metricId" : "pipeline.batchErrorMessages.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1629113109965,
      "valid" : true
    }, {
      "id" : "idleGaugeID",
      "alertText" : "Pipeline is Idle",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "TIME_OF_LAST_RECEIVED_RECORD",
      "condition" : "${time:now() - value() > 120000}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1629113109965,
      "valid" : true
    }, {
      "id" : "batchTimeAlertID",
      "alertText" : "Batch taking more time to process",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "CURRENT_BATCH_AGE",
      "condition" : "${value() > 200}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1629113109965,
      "valid" : true
    } ],
    "dataRuleDefinitions" : [ ],
    "driftRuleDefinitions" : [ ],
    "uuid" : "7cd3af37-b3c2-4868-950e-a5fd9d719b04",
    "configuration" : [ {
      "name" : "emailIDs",
      "value" : null
    }, {
      "name" : "webhookConfigs",
      "value" : null
    } ],
    "ruleIssues" : [ ],
    "configIssues" : [ ]
  },
  "libraryDefinitions" : null
}