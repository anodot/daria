{
  "pipelineConfig" : {
    "schemaVersion" : 6,
    "version" : 19,
    "pipelineId" : "directorydf77d2ca-ada1-4836-9545-7a3b83448e2e",
    "title" : "directory_schema",
    "description" : "",
    "uuid" : "6347bf2b-5526-4395-ac7a-0c34459040b1",
    "configuration" : [ {
      "name" : "executionMode",
      "value" : "STANDALONE"
    }, {
      "name" : "edgeHttpUrl",
      "value" : "http://localhost:18633"
    }, {
      "name" : "deliveryGuarantee",
      "value" : "AT_MOST_ONCE"
    }, {
      "name" : "shouldRetry",
      "value" : true
    }, {
      "name" : "retryAttempts",
      "value" : 5
    }, {
      "name" : "notifyOnStates",
      "value" : [ "RUN_ERROR", "START_ERROR", "STOP_ERROR", "RUNNING_ERROR", "RUNNING", "STOPPED", "FINISHED", "DISCONNECTED", "CONNECTING" ]
    }, {
      "name" : "emailIDs",
      "value" : [ ]
    }, {
      "name" : "constants",
      "value" : [ {
        "key" : "TOKEN",
        "value" : "correct_token"
      }, {
        "key" : "PROTOCOL",
        "value" : "anodot30"
      }, {
        "key" : "ANODOT_BASE_URL",
        "value" : "http://dummy_destination"
      }, {
        "key" : "AGENT_URL",
        "value" : "http://anodot-agent"
      }, {
        "key" : "SCHEMA_ID",
        "value" : "test_dir_json-1234"
      } ]
    }, {
      "name" : "errorRecordPolicy",
      "value" : "ORIGINAL_RECORD"
    }, {
      "name" : "workerCount",
      "value" : 0
    }, {
      "name" : "clusterSlaveMemory",
      "value" : 2048
    }, {
      "name" : "clusterSlaveJavaOpts",
      "value" : "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Dlog4j.debug"
    }, {
      "name" : "clusterLauncherEnv",
      "value" : [ ]
    }, {
      "name" : "mesosDispatcherURL",
      "value" : null
    }, {
      "name" : "logLevel",
      "value" : "INFO"
    }, {
      "name" : "hdfsS3ConfDir",
      "value" : null
    }, {
      "name" : "rateLimit",
      "value" : 0
    }, {
      "name" : "maxRunners",
      "value" : 0
    }, {
      "name" : "shouldCreateFailureSnapshot",
      "value" : true
    }, {
      "name" : "runnerIdleTIme",
      "value" : 60
    }, {
      "name" : "webhookConfigs",
      "value" : [ {
        "payload" : "{\n  \"pipeline_status\": \"{{PIPELINE_STATE}}\"}",
        "headers" : [ ],
        "httpMethod" : "POST",
        "contentType" : "application/json",
        "authType" : "NONE",
        "webhookUrl" : "${AGENT_URL}/pipeline-status-change/${pipeline:id()}"
      } ]
    }, {
      "name" : "sparkConfigs",
      "value" : [ ]
    }, {
      "name" : "amazonEMRConfig.userRegion",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.userRegionCustom",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.accessKey",
      "value" : ""
    }, {
      "name" : "amazonEMRConfig.secretKey",
      "value" : ""
    }, {
      "name" : "amazonEMRConfig.s3StagingUri",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.provisionNewCluster",
      "value" : false
    }, {
      "name" : "amazonEMRConfig.clusterId",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "amazonEMRConfig.loggingEnabled",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.s3LogUri",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.enableEMRDebugging",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.serviceRole",
      "value" : "EMR_DefaultRole"
    }, {
      "name" : "amazonEMRConfig.jobFlowRole",
      "value" : "EMR_EC2_DefaultRole"
    }, {
      "name" : "amazonEMRConfig.visibleToAllUsers",
      "value" : true
    }, {
      "name" : "amazonEMRConfig.ec2SubnetId",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.masterSecurityGroup",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveSecurityGroup",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.instanceCount",
      "value" : 2
    }, {
      "name" : "amazonEMRConfig.masterInstanceType",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.masterInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveInstanceType",
      "value" : null
    }, {
      "name" : "amazonEMRConfig.slaveInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "clusterConfig.clusterType",
      "value" : "LOCAL"
    }, {
      "name" : "clusterConfig.sparkMasterUrl",
      "value" : "local[*]"
    }, {
      "name" : "clusterConfig.deployMode",
      "value" : "CLIENT"
    }, {
      "name" : "clusterConfig.hadoopUserName",
      "value" : "hdfs"
    }, {
      "name" : "clusterConfig.stagingDir",
      "value" : "/streamsets"
    }, {
      "name" : "databricksConfig.baseUrl",
      "value" : null
    }, {
      "name" : "databricksConfig.credentialType",
      "value" : null
    }, {
      "name" : "databricksConfig.username",
      "value" : ""
    }, {
      "name" : "databricksConfig.password",
      "value" : ""
    }, {
      "name" : "databricksConfig.token",
      "value" : ""
    }, {
      "name" : "databricksConfig.clusterConfig",
      "value" : "{\n    \"num_workers\": 8,\n    \"spark_version\": \"5.3.x-scala2.11\",\n    \"node_type_id\": \"i3.xlarge\"\n}"
    }, {
      "name" : "livyConfig.baseUrl",
      "value" : null
    }, {
      "name" : "livyConfig.username",
      "value" : ""
    }, {
      "name" : "livyConfig.password",
      "value" : ""
    }, {
      "name" : "databricksConfig.provisionNewCluster",
      "value" : true
    }, {
      "name" : "databricksConfig.clusterId",
      "value" : null
    }, {
      "name" : "databricksConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "ludicrousMode",
      "value" : false
    }, {
      "name" : "ludicrousModeInputCount",
      "value" : false
    }, {
      "name" : "advancedErrorHandling",
      "value" : false
    }, {
      "name" : "triggerInterval",
      "value" : 2000
    }, {
      "name" : "preprocessScript",
      "value" : ""
    }, {
      "name" : "transformerEMRConfig.userRegion",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.userRegionCustom",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.s3StagingUri",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.clusterId",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.terminateCluster",
      "value" : false
    }, {
      "name" : "transformerEMRConfig.s3LogUri",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.serviceRole",
      "value" : "EMR_DefaultRole"
    }, {
      "name" : "transformerEMRConfig.jobFlowRole",
      "value" : "EMR_EC2_DefaultRole"
    }, {
      "name" : "transformerEMRConfig.visibleToAllUsers",
      "value" : true
    }, {
      "name" : "transformerEMRConfig.loggingEnabled",
      "value" : true
    }, {
      "name" : "transformerEMRConfig.ec2SubnetId",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.masterSecurityGroup",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.slaveSecurityGroup",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.instanceCount",
      "value" : 2
    }, {
      "name" : "transformerEMRConfig.masterInstanceType",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.slaveInstanceType",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.masterInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.slaveInstanceTypeCustom",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.accessKey",
      "value" : ""
    }, {
      "name" : "transformerEMRConfig.secretKey",
      "value" : ""
    }, {
      "name" : "transformerEMRConfig.provisionNewCluster",
      "value" : false
    }, {
      "name" : "transformerEMRConfig.useIAMRoles",
      "value" : false
    }, {
      "name" : "clusterConfig.callbackUrl",
      "value" : null
    }, {
      "name" : "clusterConfig.sparkAppName",
      "value" : "${pipeline:title()}"
    }, {
      "name" : "clusterConfig.useYarnKerberosKeytab",
      "value" : false
    }, {
      "name" : "clusterConfig.yarnKerberosKeytabSource",
      "value" : "PROPERTIES_FILE"
    }, {
      "name" : "clusterConfig.yarnKerberosKeytab",
      "value" : null
    }, {
      "name" : "clusterConfig.yarnKerberosPrincipal",
      "value" : "name@DOMAIN"
    }, {
      "name" : "transformerEMRConfig.emrVersion",
      "value" : null
    }, {
      "name" : "transformerEMRConfig.serviceAccessSecurityGroup",
      "value" : null
    }, {
      "name" : "googleCloudConfig.region",
      "value" : null
    }, {
      "name" : "googleCloudConfig.customRegion",
      "value" : null
    }, {
      "name" : "googleCloudConfig.gcsStagingUri",
      "value" : null
    }, {
      "name" : "googleCloudConfig.create",
      "value" : false
    }, {
      "name" : "googleCloudConfig.clusterPrefix",
      "value" : null
    }, {
      "name" : "googleCloudConfig.version",
      "value" : "1.4-ubuntu18"
    }, {
      "name" : "googleCloudConfig.masterType",
      "value" : null
    }, {
      "name" : "googleCloudConfig.workerType",
      "value" : null
    }, {
      "name" : "googleCloudConfig.networkType",
      "value" : null
    }, {
      "name" : "googleCloudConfig.network",
      "value" : null
    }, {
      "name" : "googleCloudConfig.subnet",
      "value" : null
    }, {
      "name" : "googleCloudConfig.tags",
      "value" : [ ]
    }, {
      "name" : "googleCloudConfig.workerCount",
      "value" : 2
    }, {
      "name" : "googleCloudConfig.clusterName",
      "value" : null
    }, {
      "name" : "googleCloudConfig.terminate",
      "value" : false
    }, {
      "name" : "googleCloudCredentialsConfig.projectId",
      "value" : null
    }, {
      "name" : "googleCloudCredentialsConfig.credentialsProvider",
      "value" : null
    }, {
      "name" : "googleCloudCredentialsConfig.path",
      "value" : null
    }, {
      "name" : "googleCloudCredentialsConfig.credentialsFileContent",
      "value" : null
    }, {
      "name" : "badRecordsHandling",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "statsAggregatorStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget::1"
    }, {
      "name" : "startEventStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "stopEventStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    }, {
      "name" : "testOriginStage",
      "value" : "streamsets-datacollector-dev-lib::com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource::3"
    }, {
      "name" : "clusterConfig.yarnKerberosKeytabBase64Bytes",
      "value" : null
    } ],
    "uiInfo" : {
      "displayMode" : "BASIC",
      "previewConfig" : {
        "previewSource" : "CONFIGURED_SOURCE",
        "batchSize" : 10,
        "timeout" : 30000,
        "writeToDestinations" : false,
        "executeLifecycleEvents" : false,
        "showHeader" : false,
        "showFieldType" : true,
        "rememberMe" : false
      }
    },
    "fragments" : [ ],
    "stages" : [ {
      "instanceName" : "source",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_origin_spooldir_SpoolDirDSource",
      "stageVersion" : "11",
      "configuration" : [ {
        "name" : "conf.dataFormatConfig.compression",
        "value" : "NONE"
      }, {
        "name" : "conf.dataFormatConfig.filePatternInArchive",
        "value" : "*"
      }, {
        "name" : "conf.dataFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "conf.dataFormatConfig.removeCtrlChars",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.textMaxLineLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormatConfig.useCustomDelimiter",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.customDelimiter",
        "value" : "\\r\\n"
      }, {
        "name" : "conf.dataFormatConfig.includeCustomDelimiterInTheText",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.jsonContent",
        "value" : "MULTIPLE_OBJECTS"
      }, {
        "name" : "conf.dataFormatConfig.jsonMaxObjectLen",
        "value" : 40960
      }, {
        "name" : "conf.dataFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "conf.dataFormatConfig.csvHeader",
        "value" : "WITH_HEADER"
      }, {
        "name" : "conf.dataFormatConfig.csvAllowExtraColumns",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.csvExtraColumnPrefix",
        "value" : "_extra_"
      }, {
        "name" : "conf.dataFormatConfig.csvMaxObjectLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "conf.dataFormatConfig.multiCharacterFieldDelimiter",
        "value" : "||"
      }, {
        "name" : "conf.dataFormatConfig.multiCharacterLineDelimiter",
        "value" : "${str:unescapeJava('\\\\n')}"
      }, {
        "name" : "conf.dataFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "conf.dataFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "conf.dataFormatConfig.csvEnableComments",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.csvCommentMarker",
        "value" : "#"
      }, {
        "name" : "conf.dataFormatConfig.csvIgnoreEmptyLines",
        "value" : true
      }, {
        "name" : "conf.dataFormatConfig.csvRecordType",
        "value" : "LIST_MAP"
      }, {
        "name" : "conf.dataFormatConfig.csvSkipStartLines",
        "value" : 0
      }, {
        "name" : "conf.dataFormatConfig.parseNull",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.nullConstant",
        "value" : "\\\\N"
      }, {
        "name" : "conf.dataFormatConfig.xmlRecordElement",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.includeFieldXpathAttributes",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.xPathNamespaceContext",
        "value" : [ ]
      }, {
        "name" : "conf.dataFormatConfig.outputFieldAttributes",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.xmlMaxObjectLen",
        "value" : 4096
      }, {
        "name" : "conf.dataFormatConfig.logMode",
        "value" : "GROK"
      }, {
        "name" : "conf.dataFormatConfig.logMaxObjectLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormatConfig.retainOriginalLine",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.customLogFormat",
        "value" : "%h %l %u %t \"%r\" %>s %b"
      }, {
        "name" : "conf.dataFormatConfig.regex",
        "value" : "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
      }, {
        "name" : "conf.dataFormatConfig.fieldPathsToGroupName",
        "value" : [ {
          "fieldPath" : "/",
          "group" : 1
        } ]
      }, {
        "name" : "conf.dataFormatConfig.grokPatternDefinition",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.grokPattern",
        "value" : "%{COMMONAPACHELOG}"
      }, {
        "name" : "conf.dataFormatConfig.onParseError",
        "value" : "ERROR"
      }, {
        "name" : "conf.dataFormatConfig.maxStackTraceLines",
        "value" : 50
      }, {
        "name" : "conf.dataFormatConfig.enableLog4jCustomLogFormat",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.log4jCustomLogFormat",
        "value" : "%r [%t] %-5p %c %x - %m%n"
      }, {
        "name" : "conf.dataFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.schemaRegistryUrls",
        "value" : [ ]
      }, {
        "name" : "conf.dataFormatConfig.schemaLookupMode",
        "value" : "SUBJECT"
      }, {
        "name" : "conf.dataFormatConfig.subject",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.schemaId",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.isDelimited",
        "value" : true
      }, {
        "name" : "conf.dataFormatConfig.binaryMaxObjectLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormatConfig.datagramMode",
        "value" : "SYSLOG"
      }, {
        "name" : "conf.dataFormatConfig.typesDbPath",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.convertTime",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.excludeInterval",
        "value" : true
      }, {
        "name" : "conf.dataFormatConfig.authFilePath",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.netflowOutputValuesMode",
        "value" : "RAW_AND_INTERPRETED"
      }, {
        "name" : "conf.dataFormatConfig.maxTemplateCacheSize",
        "value" : -1
      }, {
        "name" : "conf.dataFormatConfig.templateCacheTimeoutMs",
        "value" : -1
      }, {
        "name" : "conf.dataFormatConfig.netflowOutputValuesModeDatagram",
        "value" : "RAW_AND_INTERPRETED"
      }, {
        "name" : "conf.dataFormatConfig.maxTemplateCacheSizeDatagram",
        "value" : -1
      }, {
        "name" : "conf.dataFormatConfig.templateCacheTimeoutMsDatagram",
        "value" : -1
      }, {
        "name" : "conf.dataFormatConfig.wholeFileMaxObjectLen",
        "value" : 8192
      }, {
        "name" : "conf.dataFormatConfig.rateLimit",
        "value" : "-1"
      }, {
        "name" : "conf.dataFormatConfig.excelHeader",
        "value" : null
      }, {
        "name" : "conf.dataFormat",
        "value" : "JSON"
      }, {
        "name" : "conf.spoolDir",
        "value" : "/home/test-directory-collector"
      }, {
        "name" : "conf.numberOfThreads",
        "value" : 1
      }, {
        "name" : "conf.pathMatcherMode",
        "value" : "GLOB"
      }, {
        "name" : "conf.filePattern",
        "value" : "*.json"
      }, {
        "name" : "conf.useLastModified",
        "value" : "LEXICOGRAPHICAL"
      }, {
        "name" : "conf.processSubdirectories",
        "value" : false
      }, {
        "name" : "conf.allowLateDirectory",
        "value" : false
      }, {
        "name" : "conf.overrunLimit",
        "value" : 128
      }, {
        "name" : "conf.batchSize",
        "value" : 1000
      }, {
        "name" : "conf.poolingTimeoutSecs",
        "value" : 60
      }, {
        "name" : "conf.maxSpoolFiles",
        "value" : 1000
      }, {
        "name" : "conf.spoolingPeriod",
        "value" : 5
      }, {
        "name" : "conf.initialFileToProcess",
        "value" : null
      }, {
        "name" : "conf.errorArchiveDir",
        "value" : null
      }, {
        "name" : "conf.postProcessing",
        "value" : "NONE"
      }, {
        "name" : "conf.archiveDir",
        "value" : null
      }, {
        "name" : "conf.retentionTimeMins",
        "value" : 0
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "conf.dataFormatConfig.preserveRootElement",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.basicAuth",
        "value" : ""
      }, {
        "name" : "conf.dataFormatConfig.avroSkipUnionIndex",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.excelSkipCellsWithNoHeader",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.excelReadAllSheets",
        "value" : true
      }, {
        "name" : "conf.dataFormatConfig.excelSheetNames",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "SOURCE",
        "rawSource" : {
          "configuration" : [ {
            "name" : "fileName"
          } ]
        },
        "description" : "",
        "label" : "Read Directory",
        "xPos" : 60,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "Directory_01OutputLane15871166532210" ],
      "eventLanes" : [ "Directory_01_EventLane" ],
      "services" : [ ]
    }, {
      "instanceName" : "ExpressionEvaluator_03",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "expressionProcessorConfigs",
        "value" : [ ]
      }, {
        "name" : "headerAttributeConfigs",
        "value" : [ { } ]
      }, {
        "name" : "fieldAttributeConfigs",
        "value" : [ {
          "fieldToSet" : "/"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "DISCARD"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "PROCESSOR",
        "description" : "",
        "label" : "Expression Evaluator 1",
        "xPos" : 281,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "Directory_01OutputLane15871166532210" ],
      "outputLanes" : [ "ExpressionEvaluator_03OutputLane15750326759030" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "JythonEvaluator_01",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "initScript",
        "value" : ""
      }, {
        "name" : "script",
        "value" : "global sdc, output, error\n\ntry:\n    sdc.importLock()\n    import re\nfinally:\n    sdc.importUnlock()\n\n\ndef extract_value(obj, path):\n    for part in path.split('/'):\n        obj = obj.get(part)\n        if not obj:\n            return None\n    return obj\n\n\ndef replace_illegal_chars(value):\n    value = str(value).strip().replace(\".\", \"_\")\n    return re.sub('\\s+', '_', value)\n\n\ndef get_dimensions(record):\n    dimensions = {}\n    for dimension_path, name in sdc.userParams['DIMENSIONS'].items():\n        dimension_value = extract_value(record.value, dimension_path)\n        if not dimension_value:\n            continue\n        dimension_value = replace_illegal_chars(dimension_value)\n        if dimension_value == '':\n            continue\n        name = replace_illegal_chars(name).replace('[\\/]+', '_')\n        dimensions[name] = dimension_value\n\n    for header_attribute in sdc.userParams['HEADER_ATTRIBUTES']:\n        attribute_value = record.attributes[header_attribute]\n        if not attribute_value:\n            continue\n        attribute_value = str(attribute_value).strip()\n        if attribute_value == '':\n            continue\n        dimensions[replace_illegal_chars(header_attribute)] = replace_illegal_chars(attribute_value)\n\n    return dimensions\n\n\ndef get_measurements(record):\n    measurements = {}\n    for value_column, name in sdc.userParams['MEASUREMENTS'].items():\n        value = extract_value(record, value_column)\n        if not value:\n            continue\n        # we can't convert to float here because we will loose precision\n        # it should be converted in a separate stage\n        measurements[name] = value\n    if sdc.userParams['COUNT_RECORDS']:\n        measurements[sdc.userParams['COUNT_RECORDS_MEASUREMENT_NAME']] = 1\n    return measurements\n\n\ndef main():\n    i = -1\n    for record in sdc.records:\n        i += 1\n        try:\n            timestamp = extract_value(record.value, sdc.userParams['TIMESTAMP_COLUMN'])\n            if not timestamp:\n                continue\n            measurements = get_measurements(record.value)\n            if not measurements:\n                continue\n            new_record = sdc.createRecord(str(i))\n            new_record.value = {\n                'timestamp': timestamp,\n                'dimensions': get_dimensions(record),\n                'measurements': measurements,\n                'schemaId': '${SCHEMA_ID}',\n            }\n            output.write(new_record)\n        except Exception as e:\n            error.write(record, str(e))\n\n\nfor record in sdc.records:\n    record.value['ver'] *= 2\n\nmain()\n"
      }, {
        "name" : "destroyScript",
        "value" : ""
      }, {
        "name" : "scriptRecordType",
        "value" : "NATIVE_OBJECTS"
      }, {
        "name" : "userParams",
        "value" : [ {
          "key" : "TIMESTAMP_COLUMN",
          "value" : "timestamp_unix"
        }, {
          "key" : "DIMENSIONS",
          "value" : {
            "ver" : "ver",
            "Country" : "Country",
            "Exchange" : "Exchange",
            "metric" : "metric"
          }
        }, {
          "key" : "MEASUREMENTS",
          "value" : {
            "Clicks" : "clicks"
          }
        }, {
          "key" : "TARGET_TYPES",
          "value" : [ "gauge" ]
        }, {
          "key" : "COUNT_RECORDS",
          "value" : 0
        }, {
          "key" : "COUNT_RECORDS_MEASUREMENT_NAME",
          "value" : "count"
        }, {
          "key" : "STATIC_WHAT",
          "value" : 1
        }, {
          "key" : "VALUES_ARRAY_PATH",
          "value" : ""
        }, {
          "key" : "VALUES_ARRAY_FILTER",
          "value" : [ ]
        }, {
          "key" : "INTERVAL",
          "value" : "null"
        }, {
          "key" : "HEADER_ATTRIBUTES",
          "value" : [ ]
        }, {
          "key" : "metrics",
          "value" : { }
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ "/timestamp_unix" ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "PROCESSOR",
        "icon" : "jython.png",
        "description" : "",
        "label" : "Convert to metrics",
        "xPos" : 500,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "ExpressionEvaluator_03OutputLane15750326759030" ],
      "outputLanes" : [ "JythonEvaluator_01OutputLane16363732895470" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "ExpressionEvaluator_02",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "expressionProcessorConfigs",
        "value" : [ {
          "fieldToSet" : "/tags",
          "expression" : "${emptyMap()}"
        }, {
          "fieldToSet" : "/tags/source",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/source[0]",
          "expression" : "${\"anodot-agent\"}"
        }, {
          "fieldToSet" : "/tags/source_host_id",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/source_host_id[0]",
          "expression" : "${\"ABCDEF\"}"
        }, {
          "fieldToSet" : "/tags/source_host_name",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/source_host_name[0]",
          "expression" : "${\"agent\"}"
        }, {
          "fieldToSet" : "/tags/pipeline_id",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/pipeline_id[0]",
          "expression" : "${\"test_dir_json\"}"
        }, {
          "fieldToSet" : "/tags/pipeline_type",
          "expression" : "${emptyList()}"
        }, {
          "fieldToSet" : "/tags/pipeline_type[0]",
          "expression" : "${\"directory\"}"
        }, {
          "fieldToSet" : "/timestamp",
          "expression" : "${record:value('/timestamp')}"
        } ]
      }, {
        "name" : "headerAttributeConfigs",
        "value" : [ { } ]
      }, {
        "name" : "fieldAttributeConfigs",
        "value" : [ {
          "fieldToSet" : "/"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "PROCESSOR",
        "description" : "",
        "label" : "Add tags and static dimensions, convert timestamp to long",
        "xPos" : 720,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "JythonEvaluator_01OutputLane16363732895470" ],
      "outputLanes" : [ "ExpressionEvaluator_02OutputLane15480856372920" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "FieldTypeConverter_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_fieldtypeconverter_FieldTypeConverterDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "convertBy",
        "value" : "BY_FIELD"
      }, {
        "name" : "fieldTypeConverterConfigs",
        "value" : [ {
          "fields" : [ "/timestamp", "/measurements/clicks" ],
          "targetType" : "DECIMAL",
          "treatInputFieldAsDate" : false,
          "dataLocale" : "en,US",
          "scale" : -1,
          "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
          "dateFormat" : "YYYY_MM_DD",
          "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
          "encoding" : "UTF-8"
        } ]
      }, {
        "name" : "wholeTypeConverterConfigs",
        "value" : [ {
          "sourceType" : "INTEGER",
          "targetType" : "INTEGER",
          "treatInputFieldAsDate" : false,
          "dataLocale" : "en,US",
          "scale" : -1,
          "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
          "dateFormat" : "YYYY_MM_DD",
          "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
          "encoding" : "UTF-8"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "PROCESSOR",
        "description" : "Convert value to float and timestamp to int",
        "label" : "Convert value and timestamp",
        "xPos" : 940,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "ExpressionEvaluator_02OutputLane15480856372920" ],
      "outputLanes" : [ "destination_OutputLane" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "destination",
      "library" : "anodot",
      "stageName" : "anodot_stage_destination_AnodotDTarget",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "conf.dataGeneratorFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "conf.agentOffsetUrl",
        "value" : ""
      }, {
        "name" : "conf.agentWatermarkUrl",
        "value" : ""
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvHeader",
        "value" : "NO_HEADER"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLines",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvReplaceNewLinesString",
        "value" : " "
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "conf.dataGeneratorFormatConfig.jsonMode",
        "value" : "ARRAY_OBJECTS"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldPath",
        "value" : "/text"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textRecordSeparator",
        "value" : "\\n"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textFieldMissingAction",
        "value" : "ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.textEmptyLineIfNull",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchemaSource",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.registerSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrlsForRegistration",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaRegistryUrls",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaLookupMode",
        "value" : "SUBJECT"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subject",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.subjectToRegister",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.schemaId",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeSchema",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.avroCompression",
        "value" : "NULL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.binaryFieldPath",
        "value" : "/"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.fileNameEL",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.wholeFileExistsAction",
        "value" : "TO_ERROR"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.includeChecksumInTheEvents",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.checksumAlgorithm",
        "value" : "MD5"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlPrettyPrint",
        "value" : true
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlValidateSchema",
        "value" : false
      }, {
        "name" : "conf.dataGeneratorFormatConfig.xmlSchema",
        "value" : null
      }, {
        "name" : "conf.dataFormat",
        "value" : "JSON"
      }, {
        "name" : "conf.resourceUrl",
        "value" : "${ANODOT_BASE_URL}/api/v1/metrics?token=${TOKEN}&protocol=${PROTOCOL}"
      }, {
        "name" : "conf.headers",
        "value" : [ ]
      }, {
        "name" : "conf.httpMethod",
        "value" : "POST"
      }, {
        "name" : "conf.methodExpression",
        "value" : null
      }, {
        "name" : "conf.client.transferEncoding",
        "value" : "BUFFERED"
      }, {
        "name" : "conf.client.httpCompression",
        "value" : "NONE"
      }, {
        "name" : "conf.client.connectTimeoutMillis",
        "value" : 300000
      }, {
        "name" : "conf.client.readTimeoutMillis",
        "value" : 300000
      }, {
        "name" : "conf.client.numThreads",
        "value" : 1
      }, {
        "name" : "conf.client.authType",
        "value" : "NONE"
      }, {
        "name" : "conf.client.useOAuth2",
        "value" : false
      }, {
        "name" : "conf.client.oauth.consumerKey",
        "value" : ""
      }, {
        "name" : "conf.client.oauth.consumerSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth.token",
        "value" : ""
      }, {
        "name" : "conf.client.oauth.tokenSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.credentialsGrantType",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.tokenUrl",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.clientId",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.clientSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.username",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.password",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.resourceOwnerClientId",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.resourceOwnerClientSecret",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.algorithm",
        "value" : "NONE"
      }, {
        "name" : "conf.client.oauth2.key",
        "value" : ""
      }, {
        "name" : "conf.client.oauth2.jwtClaims",
        "value" : null
      }, {
        "name" : "conf.client.oauth2.transferEncoding",
        "value" : "BUFFERED"
      }, {
        "name" : "conf.client.oauth2.additionalValues",
        "value" : [ { } ]
      }, {
        "name" : "conf.client.basicAuth.username",
        "value" : ""
      }, {
        "name" : "conf.client.basicAuth.password",
        "value" : ""
      }, {
        "name" : "conf.client.useProxy",
        "value" : true
      }, {
        "name" : "conf.client.proxy.uri",
        "value" : "http://squid:3128"
      }, {
        "name" : "conf.client.proxy.username",
        "value" : ""
      }, {
        "name" : "conf.client.proxy.password",
        "value" : ""
      }, {
        "name" : "conf.client.tlsConfig.tlsEnabled",
        "value" : false
      }, {
        "name" : "conf.client.tlsConfig.keyStoreFilePath",
        "value" : "/opt/jdk/jre/lib/security/cacerts"
      }, {
        "name" : "conf.client.tlsConfig.keyStoreType",
        "value" : "JKS"
      }, {
        "name" : "conf.client.tlsConfig.keyStorePassword",
        "value" : ""
      }, {
        "name" : "conf.client.tlsConfig.keyStoreAlgorithm",
        "value" : "SunX509"
      }, {
        "name" : "conf.client.tlsConfig.trustStoreFilePath",
        "value" : "/opt/jdk/jre/lib/security/cacerts"
      }, {
        "name" : "conf.client.tlsConfig.trustStoreType",
        "value" : "JKS"
      }, {
        "name" : "conf.client.tlsConfig.trustStorePassword",
        "value" : ""
      }, {
        "name" : "conf.client.tlsConfig.trustStoreAlgorithm",
        "value" : "SunX509"
      }, {
        "name" : "conf.client.tlsConfig.useDefaultProtocols",
        "value" : true
      }, {
        "name" : "conf.client.tlsConfig.protocols",
        "value" : [ ]
      }, {
        "name" : "conf.client.tlsConfig.useDefaultCiperSuites",
        "value" : true
      }, {
        "name" : "conf.client.tlsConfig.cipherSuites",
        "value" : [ ]
      }, {
        "name" : "conf.client.requestLoggingConfig.enableRequestLogging",
        "value" : false
      }, {
        "name" : "conf.client.requestLoggingConfig.logLevel",
        "value" : "INFO"
      }, {
        "name" : "conf.client.requestLoggingConfig.verbosity",
        "value" : "PAYLOAD_ANY"
      }, {
        "name" : "conf.client.requestLoggingConfig.maxEntitySize",
        "value" : 1000
      }, {
        "name" : "conf.singleRequestPerBatch",
        "value" : false
      }, {
        "name" : "conf.rateLimit",
        "value" : 0
      }, {
        "name" : "conf.maxRequestCompletionSecs",
        "value" : 60
      }, {
        "name" : "conf.responseConf.sendResponseToOrigin",
        "value" : false
      }, {
        "name" : "conf.responseConf.responseType",
        "value" : "SUCCESS_RECORDS"
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      }, {
        "name" : "conf.dataGeneratorFormatConfig.csvQuoteMode",
        "value" : "MINIMAL"
      }, {
        "name" : "conf.dataGeneratorFormatConfig.basicAuthUserInfo",
        "value" : null
      }, {
        "name" : "conf.dataGeneratorFormatConfig.basicAuthUserInfoForRegistration",
        "value" : null
      }, {
        "name" : "conf.parallelSendersNumber",
        "value" : 1
      }, {
        "name" : "conf.maxBatchSize",
        "value" : 1000
      }, {
        "name" : "conf.propertiesPath",
        "value" : null
      }, {
        "name" : "conf.partitioningKeyPath",
        "value" : null
      }, {
        "name" : "conf.maxSendResponseWait",
        "value" : 60000
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "TARGET",
        "description" : "",
        "label" : "Anodot",
        "xPos" : 1160,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "destination_OutputLane" ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "JythonEvaluator_02",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "initScript",
        "value" : ""
      }, {
        "name" : "script",
        "value" : "global sdc\n\ntry:\n    sdc.importLock()\n    import time\n    import os\n    import sys\n\n    sys.path.append(os.path.join(os.environ['SDC_DIST'], 'python-libs'))\n    import requests\nfinally:\n    sdc.importUnlock()\n# todo will dirs break after update?\nslept = False\nfor record in sdc.records:\n    if record.attributes['sdc.event.type'] == 'finished-file':\n        if not slept:\n            time.sleep(int(sdc.userParams['SLEEP_TIME']))\n            slept = True\n        res = requests.get(sdc.userParams['PIPELINE_OFFSET_URL'])\n        res.raise_for_status()\n        record.value['watermark'] = float(res.json()) + float(sdc.userParams['BUCKET_SIZE_IN_SECONDS'])\n        record.value['schemaId'] = sdc.userParams['SCHEMA_ID']\n        # send monitoring metric with file_processed 1 and now() - watermark\n    sdc.output.write(record)"
      }, {
        "name" : "destroyScript",
        "value" : ""
      }, {
        "name" : "scriptRecordType",
        "value" : "NATIVE_OBJECTS"
      }, {
        "name" : "userParams",
        "value" : [ {
          "key" : "SLEEP_TIME",
          "value" : "10"
        }, {
          "key" : "BUCKET_SIZE_IN_SECONDS",
          "value" : "3600"
        }, {
          "key" : "SCHEMA_ID",
          "value" : "test_dir_json-1234"
        }, {
          "key" : "PIPELINE_OFFSET_URL",
          "value" : "http://anodot-agent/pipeline-offset/test_dir_json"
        } ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 187,
        "stageType" : "PROCESSOR",
        "icon" : "jython.png",
        "description" : "",
        "label" : "Create watermark",
        "xPos" : 278,
        "displayMode" : "ADVANCED"
      },
      "inputLanes" : [ "Directory_01_EventLane" ],
      "outputLanes" : [ "JythonEvaluator_02OutputLane16369944050210" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "FieldRemover_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_fieldfilter_FieldFilterDProcessor",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "filterOperation",
        "value" : "KEEP"
      }, {
        "name" : "fields",
        "value" : [ "/watermark", "/schemaId" ]
      }, {
        "name" : "constant",
        "value" : null
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 188,
        "stageType" : "PROCESSOR",
        "icon" : "filter.png",
        "description" : "",
        "label" : "Remove unused fields",
        "xPos" : 504,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "JythonEvaluator_02OutputLane16369944050210" ],
      "outputLanes" : [ "FieldRemover_01OutputLane15888371365220" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "destination_watermark_with_metrics",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "initScript",
        "value" : "# Available Objects:\n#\n#  sdc.state: a dict that is preserved between invocations of this script.\n#         Useful for caching bits of data e.g. counters.\n#  sdc.log.<loglevel>(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n#                               loglevel is any log4j level: e.g. info, error, warn, trace.\n#  sdc.getFieldNull(Record, 'field path'): Receive a constant defined above\n#                                  to check if the field is typed field with value null\n#  sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map).\n#  sdc.createEvent(String type, int version): Creates a new event.\n#                            Create new empty event with standard headers.\n#  sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map).\n#\n\n# sdc.state['connection'] = new Connection().open()\n\n"
      }, {
        "name" : "script",
        "value" : "# Available constants: \n#   They are to assign a type to a field with a value null.\n#   sdc.NULL_BOOLEAN, sdc.NULL_CHAR, sdc.NULL_BYTE, sdc.NULL_SHORT, sdc.NULL_INTEGER, sdc.NULL_LONG,\n#   sdc.NULL_FLOAT, sdc.NULL_DOUBLE, sdc.NULL_DATE, sdc.NULL_DATETIME, sdc.NULL_TIME, sdc.NULL_DECIMAL,\n#   sdc.NULL_BYTE_ARRAY, sdc.NULL_STRING, sdc.NULL_LIST, sdc.NULL_MAP\n# \n# Available Objects:\n# \n#  sdc.records: an array of records to process, depending on Jython processor\n#           processing mode it may have 1 record or all the records in the batch.\n#\n#  sdc.state: a dict that is preserved between invocations of this script. \n#         Useful for caching bits of data e.g. counters.\n#\n#  sdc.log.<loglevel>(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n#                               loglevel is any log4j level: e.g. info, error, warn, trace.\n#\n#  sdc.output.write(record): writes a record to processor output\n#\n#  sdc.error.write(record, message): sends a record to error\n#\n#  sdc.getFieldNull(Record, 'field path'): Receive a constant defined above \n#                                  to check if the field is typed field with value null\n#  sdc.createRecord(String recordId): Creates a new record.\n#                            Pass a recordId to uniquely identify the record and include enough information to track down the record source. \n#  sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map)\n#\n#  sdc.createEvent(String type, int version): Creates a new event.\n#                            Create new empty event with standard headers.\n#  sdc.toEvent(Record): Send event to event stream\n#                            Only events created with sdcFunctions.createEvent are supported.\n#  sdc.isPreview(): Determine if pipeline is in preview mode.\n#\n#  sdc.userParams: Dictionary of user-specified keys and values (from UI).\n#\n#\n# Available Record Header Variables:\n#\n#  record.attributes: a map of record header attributes.\n#\n#  record.<header name>: get the value of 'header name'.\n#\n# Add additional module search paths:\n#   try:\n#       sdc.importLock()\n#       import sys\n#       sys.path.append('/some/other/dir/to/search')\n#       import something\n#   finally:\n#       sdc.importUnlock()\n#\n\n# Sample Jython code\nfor record in sdc.records:\n  try:\n    # Change record root field value to a STRING value\n    # record.value = 'Hello '\n\n\n    # Change record root field value to a MAP value and create an entry\n    # record.value = { 'V' : 'Hello'}\n\n    # Access a MAP entry\n    # record.value['X'] = record.value['V'] + ' World'\n\n    # Modify a MAP entry\n    # record.value['V'] = 5\n\n    # Create an ARRAY entry\n    # record.value['A'] = [ 'Element 1', 'Element 2' ]\n\n    # Access an ARRAY entry\n    # record.value['B'] = record.value['A'][0]\n\n    # Modify an existing ARRAY entry\n    # record.value['A'][0] = 100\n\n    # Assign a integer type to a field and value null\n    # record.value['null_int'] = sdc.NULL_INTEGER \n\n    # Check if the field is NULL_INTEGER(Both '==' and 'is' work). If so, assign a value \n    # if sdc.getFieldNull(record, '/null_int') == sdc.NULL_INTEGER:\n    #    record.value['null_int'] = 123\n\n    # Direct access to the underlying Data Collector Record. Use for read-only operations.\n    # fieldAttr = record.sdcRecord.get('/value').getAttribute('attr')  \n\n    # Create a new record with map field \n    # newRecord = sdc.createRecord(record.sourceId + ':newRecordId')\n    # newRecord.value = {'field1' : 'val1', 'field2' : 'val2'}\n    # sdc.output.write(newRecord)\n\n    # Applies if the source uses WHOLE_FILE as data format\n    # input_stream = record.value['fileRef'].getInputStream()\n    # try:\n    #   input_stream.read() #Process the input stream\n    # finally:  \n    #   input_stream.close()\n\n    # Modify a record header attribute entry\n    # record.attributes['name'] = record.attributes['first_name'] + ' ' + record.attributes['last_name']\n\n    # Get a record header with field names ex. get sourceId and errorCode\n    # sourceId = record.sourceId\n    # errorCode = ''\n    # if record.errorCode:\n    #   errorCode = record.errorCode\n\n    # Write record to processor output\n    sdc.output.write(record)\n\n  except Exception as e:\n    # Send record to error\n    sdc.error.write(record, str(e))\n\n"
      }, {
        "name" : "destroyScript",
        "value" : "# Available Objects:\n#\n#  sdc.state: a dict that is preserved between invocations of this script.\n#         Useful for caching bits of data e.g. counters.\n#  sdc.log.<loglevel>(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n#                               loglevel is any log4j level: e.g. info, error, warn, trace.\n#  sdc.getFieldNull(Record, 'field path'): Receive a constant defined above \n#                                  to check if the field is typed field with value null.\n#  sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map).\n#  sdc.createEvent(String type, int version): Creates a new event.\n#                            Create new empty event with standard headers.\n#  sdc.toEvent(Record): Send event to event stream.\n#                            Only events created with sdcFunctions.createEvent are supported.\n#\n\n# sdc.state['connection'].close()\n\n"
      }, {
        "name" : "scriptRecordType",
        "value" : "NATIVE_OBJECTS"
      }, {
        "name" : "userParams",
        "value" : [ ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 190,
        "stageType" : "PROCESSOR",
        "icon" : "jython.png",
        "description" : "",
        "label" : "Send Watermark with Metrics",
        "xPos" : 715,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "FieldRemover_01OutputLane15888371365220" ],
      "outputLanes" : [ "destination_watermark_with_metrics_OutputLane16536353593530" ],
      "eventLanes" : [ ],
      "services" : [ ]
    }, {
      "instanceName" : "destination_watermark_logs",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_localfilesystem_LocalFileSystemDTarget",
      "stageVersion" : "4",
      "configuration" : [ {
        "name" : "configs.uniquePrefix",
        "value" : "sdc-${sdc:id()}"
      }, {
        "name" : "configs.fileNameSuffix",
        "value" : null
      }, {
        "name" : "configs.dirPathTemplateInHeader",
        "value" : false
      }, {
        "name" : "configs.dirPathTemplate",
        "value" : "/tmp/out/${YYYY()}-${MM()}-${DD()}-${hh()}"
      }, {
        "name" : "configs.timeZoneID",
        "value" : "UTC"
      }, {
        "name" : "configs.timeDriver",
        "value" : "${time:now()}"
      }, {
        "name" : "configs.maxRecordsPerFile",
        "value" : 0
      }, {
        "name" : "configs.maxFileSize",
        "value" : 0
      }, {
        "name" : "configs.idleTimeout",
        "value" : "${1 * HOURS}"
      }, {
        "name" : "configs.compression",
        "value" : "NONE"
      }, {
        "name" : "configs.otherCompression",
        "value" : null
      }, {
        "name" : "configs.fileType",
        "value" : "TEXT"
      }, {
        "name" : "configs.keyEl",
        "value" : "${uuid()}"
      }, {
        "name" : "configs.lateRecordsLimit",
        "value" : "${1 * HOURS}"
      }, {
        "name" : "configs.rollIfHeader",
        "value" : false
      }, {
        "name" : "configs.rollHeaderName",
        "value" : "roll"
      }, {
        "name" : "configs.lateRecordsAction",
        "value" : "SEND_TO_ERROR"
      }, {
        "name" : "configs.lateRecordsDirPathTemplate",
        "value" : "/tmp/late/${YYYY()}-${MM()}-${DD()}"
      }, {
        "name" : "configs.dataFormat",
        "value" : "JSON"
      }, {
        "name" : "configs.hdfsPermissionCheck",
        "value" : true
      }, {
        "name" : "configs.permissionEL",
        "value" : null
      }, {
        "name" : "configs.skipOldTempFileRecovery",
        "value" : false
      }, {
        "name" : "configs.dataGeneratorFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvHeader",
        "value" : "NO_HEADER"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvReplaceNewLines",
        "value" : true
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvReplaceNewLinesString",
        "value" : " "
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvQuoteMode",
        "value" : "MINIMAL"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.jsonMode",
        "value" : "MULTIPLE_OBJECTS"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.textFieldPath",
        "value" : "/text"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.textRecordSeparator",
        "value" : "\\n"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.textFieldMissingAction",
        "value" : "ERROR"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.textEmptyLineIfNull",
        "value" : false
      }, {
        "name" : "configs.dataGeneratorFormatConfig.avroSchemaSource",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.registerSchema",
        "value" : false
      }, {
        "name" : "configs.dataGeneratorFormatConfig.schemaRegistryUrlsForRegistration",
        "value" : [ "" ]
      }, {
        "name" : "configs.dataGeneratorFormatConfig.schemaRegistryUrls",
        "value" : [ "" ]
      }, {
        "name" : "configs.dataGeneratorFormatConfig.basicAuthUserInfo",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.schemaLookupMode",
        "value" : "SUBJECT"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.subject",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.subjectToRegister",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.basicAuthUserInfoForRegistration",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.schemaId",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.avroCompression",
        "value" : "NULL"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.binaryFieldPath",
        "value" : "/"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.fileNameEL",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.wholeFileExistsAction",
        "value" : "TO_ERROR"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.includeChecksumInTheEvents",
        "value" : false
      }, {
        "name" : "configs.dataGeneratorFormatConfig.checksumAlgorithm",
        "value" : "MD5"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.xmlPrettyPrint",
        "value" : true
      }, {
        "name" : "configs.dataGeneratorFormatConfig.xmlValidateSchema",
        "value" : false
      }, {
        "name" : "configs.dataGeneratorFormatConfig.xmlSchema",
        "value" : null
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "yPos" : 187,
        "stageType" : "TARGET",
        "icon" : "localfilesystem.png",
        "description" : "",
        "label" : "Watermark Destination Logs",
        "xPos" : 934,
        "displayMode" : "BASIC"
      },
      "inputLanes" : [ "destination_watermark_with_metrics_OutputLane16536353593530" ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "errorStage" : {
      "instanceName" : "Discard_ErrorStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Error Records - Discard",
        "xPos" : 563,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    },
    "info" : {
      "pipelineId" : "directorydf77d2ca-ada1-4836-9545-7a3b83448e2e",
      "title" : "directory_schema",
      "description" : "",
      "created" : 1653635342341,
      "lastModified" : 1653635389631,
      "creator" : "admin",
      "lastModifier" : "admin",
      "lastRev" : "0",
      "uuid" : "6347bf2b-5526-4395-ac7a-0c34459040b1",
      "valid" : false,
      "metadata" : {
        "labels" : [ "directory", "http" ]
      },
      "name" : "directorydf77d2ca-ada1-4836-9545-7a3b83448e2e",
      "sdcVersion" : "3.18.0",
      "sdcId" : "0829d289-da75-11ec-ac9a-27f339396afa"
    },
    "metadata" : {
      "labels" : [ "directory", "http" ]
    },
    "statsAggregatorStage" : {
      "instanceName" : "statsAggregatorStageInstance",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "stageType" : "TARGET",
        "label" : "Stats Aggregator -Write to Control Hub directly"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    },
    "startEventStages" : [ {
      "instanceName" : "Discard_StartEventStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Start Event - Discard",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "stopEventStages" : [ {
      "instanceName" : "Discard_StopEventStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Stop Event - Discard",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ],
      "eventLanes" : [ ],
      "services" : [ ]
    } ],
    "testOriginStage" : {
      "instanceName" : "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStage",
      "library" : "streamsets-datacollector-dev-lib",
      "stageName" : "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource",
      "stageVersion" : "3",
      "configuration" : [ {
        "name" : "rawData",
        "value" : "{\n  \"f1\": \"abc\",\n  \"f2\": \"xyz\",\n  \"f3\": \"lmn\"\n}"
      }, {
        "name" : "stopAfterFirstBatch",
        "value" : false
      }, {
        "name" : "eventData",
        "value" : null
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      } ],
      "uiInfo" : {
        "stageType" : "SOURCE",
        "label" : "Test Origin - Dev Raw Data Source"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStageOutputLane1" ],
      "eventLanes" : [ ],
      "services" : [ {
        "service" : "com.streamsets.pipeline.api.service.dataformats.DataFormatParserService",
        "serviceVersion" : 2,
        "configuration" : [ {
          "name" : "displayFormats",
          "value" : "DELIMITED,JSON,LOG,SDC_JSON,TEXT,XML"
        }, {
          "name" : "dataFormat",
          "value" : "JSON"
        }, {
          "name" : "dataFormatConfig.compression",
          "value" : "NONE"
        }, {
          "name" : "dataFormatConfig.filePatternInArchive",
          "value" : "*"
        }, {
          "name" : "dataFormatConfig.charset",
          "value" : "UTF-8"
        }, {
          "name" : "dataFormatConfig.removeCtrlChars",
          "value" : false
        }, {
          "name" : "dataFormatConfig.textMaxLineLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.useCustomDelimiter",
          "value" : false
        }, {
          "name" : "dataFormatConfig.customDelimiter",
          "value" : "\\r\\n"
        }, {
          "name" : "dataFormatConfig.includeCustomDelimiterInTheText",
          "value" : false
        }, {
          "name" : "dataFormatConfig.jsonContent",
          "value" : "MULTIPLE_OBJECTS"
        }, {
          "name" : "dataFormatConfig.jsonMaxObjectLen",
          "value" : 4096
        }, {
          "name" : "dataFormatConfig.csvFileFormat",
          "value" : "CSV"
        }, {
          "name" : "dataFormatConfig.csvHeader",
          "value" : "NO_HEADER"
        }, {
          "name" : "dataFormatConfig.csvAllowExtraColumns",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvExtraColumnPrefix",
          "value" : "_extra_"
        }, {
          "name" : "dataFormatConfig.csvMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.csvCustomDelimiter",
          "value" : "|"
        }, {
          "name" : "dataFormatConfig.multiCharacterFieldDelimiter",
          "value" : "||"
        }, {
          "name" : "dataFormatConfig.multiCharacterLineDelimiter",
          "value" : "${str:unescapeJava('\\\\n')}"
        }, {
          "name" : "dataFormatConfig.csvCustomEscape",
          "value" : "\\"
        }, {
          "name" : "dataFormatConfig.csvCustomQuote",
          "value" : "\""
        }, {
          "name" : "dataFormatConfig.csvEnableComments",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvCommentMarker",
          "value" : "#"
        }, {
          "name" : "dataFormatConfig.csvIgnoreEmptyLines",
          "value" : false
        }, {
          "name" : "dataFormatConfig.csvRecordType",
          "value" : "LIST_MAP"
        }, {
          "name" : "dataFormatConfig.csvSkipStartLines",
          "value" : 0
        }, {
          "name" : "dataFormatConfig.parseNull",
          "value" : false
        }, {
          "name" : "dataFormatConfig.nullConstant",
          "value" : "\\\\N"
        }, {
          "name" : "dataFormatConfig.xmlRecordElement",
          "value" : null
        }, {
          "name" : "dataFormatConfig.preserveRootElement",
          "value" : false
        }, {
          "name" : "dataFormatConfig.includeFieldXpathAttributes",
          "value" : false
        }, {
          "name" : "dataFormatConfig.xPathNamespaceContext",
          "value" : [ ]
        }, {
          "name" : "dataFormatConfig.outputFieldAttributes",
          "value" : false
        }, {
          "name" : "dataFormatConfig.xmlMaxObjectLen",
          "value" : 4096
        }, {
          "name" : "dataFormatConfig.logMode",
          "value" : "COMMON_LOG_FORMAT"
        }, {
          "name" : "dataFormatConfig.logMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.retainOriginalLine",
          "value" : false
        }, {
          "name" : "dataFormatConfig.customLogFormat",
          "value" : "%h %l %u %t \"%r\" %>s %b"
        }, {
          "name" : "dataFormatConfig.regex",
          "value" : "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
        }, {
          "name" : "dataFormatConfig.fieldPathsToGroupName",
          "value" : [ {
            "fieldPath" : "/",
            "group" : 1
          } ]
        }, {
          "name" : "dataFormatConfig.grokPatternDefinition",
          "value" : null
        }, {
          "name" : "dataFormatConfig.grokPattern",
          "value" : "%{COMMONAPACHELOG}"
        }, {
          "name" : "dataFormatConfig.onParseError",
          "value" : "ERROR"
        }, {
          "name" : "dataFormatConfig.maxStackTraceLines",
          "value" : 50
        }, {
          "name" : "dataFormatConfig.enableLog4jCustomLogFormat",
          "value" : false
        }, {
          "name" : "dataFormatConfig.log4jCustomLogFormat",
          "value" : "%r [%t] %-5p %c %x - %m%n"
        }, {
          "name" : "dataFormatConfig.avroSchemaSource",
          "value" : null
        }, {
          "name" : "dataFormatConfig.avroSchema",
          "value" : null
        }, {
          "name" : "dataFormatConfig.schemaRegistryUrls",
          "value" : [ ]
        }, {
          "name" : "dataFormatConfig.basicAuth",
          "value" : ""
        }, {
          "name" : "dataFormatConfig.schemaLookupMode",
          "value" : "SUBJECT"
        }, {
          "name" : "dataFormatConfig.subject",
          "value" : null
        }, {
          "name" : "dataFormatConfig.schemaId",
          "value" : null
        }, {
          "name" : "dataFormatConfig.avroSkipUnionIndex",
          "value" : false
        }, {
          "name" : "dataFormatConfig.protoDescriptorFile",
          "value" : null
        }, {
          "name" : "dataFormatConfig.messageType",
          "value" : null
        }, {
          "name" : "dataFormatConfig.isDelimited",
          "value" : false
        }, {
          "name" : "dataFormatConfig.binaryMaxObjectLen",
          "value" : 1024
        }, {
          "name" : "dataFormatConfig.datagramMode",
          "value" : "SYSLOG"
        }, {
          "name" : "dataFormatConfig.typesDbPath",
          "value" : null
        }, {
          "name" : "dataFormatConfig.convertTime",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excludeInterval",
          "value" : false
        }, {
          "name" : "dataFormatConfig.authFilePath",
          "value" : null
        }, {
          "name" : "dataFormatConfig.netflowOutputValuesMode",
          "value" : "RAW_AND_INTERPRETED"
        }, {
          "name" : "dataFormatConfig.maxTemplateCacheSize",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.templateCacheTimeoutMs",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.netflowOutputValuesModeDatagram",
          "value" : "RAW_AND_INTERPRETED"
        }, {
          "name" : "dataFormatConfig.maxTemplateCacheSizeDatagram",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.templateCacheTimeoutMsDatagram",
          "value" : -1
        }, {
          "name" : "dataFormatConfig.wholeFileMaxObjectLen",
          "value" : 8192
        }, {
          "name" : "dataFormatConfig.rateLimit",
          "value" : "-1"
        }, {
          "name" : "dataFormatConfig.verifyChecksum",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelHeader",
          "value" : null
        }, {
          "name" : "dataFormatConfig.excelSkipCellsWithNoHeader",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelReadAllSheets",
          "value" : false
        }, {
          "name" : "dataFormatConfig.excelSheetNames",
          "value" : [ ]
        } ]
      } ]
    },
    "valid" : false,
    "issues" : {
      "pipelineIssues" : [ ],
      "stageIssues" : {
        "destination" : [ {
          "instanceName" : "destination",
          "serviceName" : null,
          "level" : "STAGE",
          "configGroup" : null,
          "configName" : null,
          "message" : "VALIDATION_0008 - Invalid configuration: 'conf.agentWatermarkUrl'",
          "count" : 1,
          "additionalInfo" : null,
          "antennaDoctorMessages" : null
        } ]
      },
      "issueCount" : 1
    },
    "previewable" : false
  },
  "pipelineRules" : {
    "schemaVersion" : 3,
    "version" : 2,
    "metricsRuleDefinitions" : [ {
      "id" : "badRecordsAlertID",
      "alertText" : "High incidence of Error Records",
      "metricId" : "pipeline.batchErrorRecords.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1637078060696,
      "valid" : true
    }, {
      "id" : "stageErrorAlertID",
      "alertText" : "High incidence of Stage Errors",
      "metricId" : "pipeline.batchErrorMessages.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1637078060696,
      "valid" : true
    }, {
      "id" : "idleGaugeID",
      "alertText" : "Pipeline is Idle",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "TIME_OF_LAST_RECEIVED_RECORD",
      "condition" : "${time:now() - value() > 120000}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1637078060696,
      "valid" : true
    }, {
      "id" : "batchTimeAlertID",
      "alertText" : "Batch taking more time to process",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "CURRENT_BATCH_AGE",
      "condition" : "${value() > 200}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1637078060696,
      "valid" : true
    } ],
    "dataRuleDefinitions" : [ ],
    "driftRuleDefinitions" : [ ],
    "uuid" : "1ae3a2f5-e1be-436e-b63d-698e28524ab6",
    "configuration" : [ {
      "name" : "emailIDs",
      "value" : null
    }, {
      "name" : "webhookConfigs",
      "value" : null
    } ],
    "ruleIssues" : [ ],
    "configIssues" : [ ]
  },
  "libraryDefinitions" : null
}