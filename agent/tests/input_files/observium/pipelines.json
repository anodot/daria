[
  {
    "source": "observium",
    "pipeline_id": "observium_ports",
    "interval": 300,
    "query": "select ifInBroadcastPkts, ifInErrors_rate, ifOctets_rate, ifOutUcastPkts, ifInNUcastPkts, ifUcastPkts_rate, ifInDiscards_rate, ifOutNUcastPkts_rate, ifOutBroadcastPkts_rate, ifOutMulticastPkts_rate, ifInUcastPkts, ifDiscards_rate, ifInOctets_rate, ifOutErrors, ifOutNUcastPkts, ifInOctets_perc, ifInNUcastPkts_rate, ifOutUcastPkts_rate, ifInDiscards, ifOutBroadcastPkts, ifInBroadcastPkts_rate, port_mcbc, ifInErrors, ifOutDiscards, ifOutOctets_rate, ifOutMulticastPkts, ifInUcastPkts_rate, ifOutOctets_perc, ifOutDiscards_rate, ifOutOctets, ifInMulticastPkts_rate, ifOutErrors_rate, ifInOctets, ifErrors_rate, ifInMulticastPkts, ifSpeed, ifDescr, ifAlias, port_label, poll_time, ifType, d.sysName, dl.location from ports p join devices d on d.device_id = p.device_id join devices_locations dl on dl.device_id = p.device_id where poll_time >= 1628160600 and poll_time < 1628160660",
    "default_values_type": "ports",
    "lookups": {
      "DEST_GROUP_CATEGORY": {
        "type": "file",
        "path": "/usr/src/app/tests/input_files/observium/DEST_GROUP_CATEGORY",
        "format": "CSV"
      }
    },
    "dimensions": [
      "INTERFACE_SPEED",
      "Location",
      "DEST_STATE",
      "PARENT_ELEMENT_LOCATION"
    ],
    "dimension_configurations": {
      "INTERFACE_SPEED": {
        "value_path": "ifSpeed"
      },
      "Location": {
        "value_path": "location"
      },
      "DEST_STATE": {
        "value_path": "port_label",
        "transformations": [
          {
            "type": "function",
            "name": "to_upper"
          },
          {
            "type": "lookup",
            "name": "DEST_GROUP_CATEGORY",
            "key": "ABBREVIATION",
            "value": "STATE",
            "compare_function": "contains",
            "default": "other",
            "strict": false
          }
        ]
      },
      "PARENT_ELEMENT_LOCATION": {
        "value_path": "ifType",
        "transformations": [
          {
            "type": "function",
            "name": "regex_substring",
            "args": [".+\\.(.+)", "\\g<1>"]
          }
        ]
      }
    },
    "tags": {
      "Static_tag": ["static_tag_value"]
    },
    "tag_configurations": {
      "INTERFACE_ALIAS": {
        "value_path": "ifAlias"
      },
      "INTERFACE_DESCRIPTION": {
        "value_path": "ifDescr"
      },
      "INTERFACE_SPEED": {
        "value_path": "ifSpeed"
      }
    }
  },
  {
    "source": "observium",
    "pipeline_id": "observium_mempools",
    "interval": 300,
    "default_values_type": "mempools",
    "dimensions": [
      "Memory_Pool_ID",
      "Memory_Pool_Description",
      "Memory_Pool_Vendor",
      "Vendor"
    ],
    "dimension_configurations": {
      "Vendor": {
        "value_path": "vendor",
        "transformations": [
          {
            "type": "function",
            "name": "regex_substring",
            "args": ["(.+)\\..+", "\\g<1>"]
          }
        ]
      },
      "Memory_Pool_ID": {
        "value_path": "mempool_id"
      },
      "Memory_Pool_Description": {
        "value_path": "mempool_descr"
      },
      "Memory_Pool_Vendor": {
        "value_path": "mempool_mib"
      }
    },
    "query": "select m.*, d.sysName, dl.location, ml.vendor from mempools m join devices d on d.device_id = m.device_id join devices_locations dl on dl.device_id = m.device_id join mempools_lookup ml on ml.mempool_id = m.mempool_id and ml.device_id = m.device_id where mempool_polled >= 1628160600 and mempool_polled < 1628160660"
  },
  {
    "source": "observium",
    "pipeline_id": "observium_mempools_edit",
    "interval": 300,
    "default_values_type": "mempools",
    "query": "select m.*, d.sysName, dl.location from mempools m join devices d on d.device_id = m.device_id join devices_locations dl on dl.device_id = m.device_id where mempool_polled >= 1628160600 and mempool_polled < 1628160660"
  },
  {
    "source": "observium",
    "pipeline_id": "observium_processors",
    "interval": 300,
    "delay": 1,
    "query": "select p.*, d.sysName, dl.location from processors p join devices d on d.device_id = p.device_id join devices_locations dl on dl.device_id = p.device_id where processor_polled >= 1628160600 and processor_polled < 1628160660",
    "values": {
      "processor_usage": "gauge"
    },
    "dimensions": ["processor_type", "processor_name"],
    "dimension_configurations": {
      "processor_name": {
          "value_path": "processor_descr"
      }
    },
    "timestamp": {
      "type": "unix",
      "name": "processor_polled"
    }
  },
  {
    "source": "observium",
    "pipeline_id": "observium_storage",
    "interval": 300,
    "default_values_type": "storage",
    "dimensions": [
      "Storage size",
      "storage_mib"
    ],
    "dimension_configurations": {
      "Storage size": {
        "value_path": "storage_size"
      }
    },
    "values": {
      "my own field": "gauge",
      "storage_perc": "gauge"
    },
    "query": "select s.*, d.sysName, dl.location from storage s join devices d on d.device_id = s.device_id join devices_locations dl on dl.device_id = s.device_id where storage_polled >= 1628160600 and storage_polled < 1628160660"
  },
  {
    "source": "observium",
    "pipeline_id": "observium_storage_transform",
    "interval": 300,
    "default_values_type": "storage",
    "dimensions": [
      "Storage units by 8",
      "HostName"
    ],
    "lookups": {
      "HOSTNAME_GROUP": {
        "type": "file",
        "path": "/usr/src/app/tests/input_files/observium/HOSTNAME_GROUP",
        "format": "CSV"
      }
    },
    "dimension_configurations": {
      "Storage units by 8": {
        "value_path": "storage_units",
        "transformations": [
          {
            "type": "function",
            "name": "divide",
            "args": [8]
          }
        ]
      },
      "HostName": {
        "value_path": "hostname",
        "transformations": [
          {
            "type": "lookup",
            "name": "HOSTNAME_GROUP",
            "key": "HOST_NAME",
            "value": "REPLACE_NAME",
            "compare_function": "regex_contains",
            "default": "DEFAULT_name"
          }
        ]
      }
    },
    "values": {
      "storage_perc": "gauge",
      "storage_units": "counter"
    },
    "measurement_configurations": {
      "storage_units": {
        "value_path": "storage_units",
        "transformations": [
          {
            "type": "function",
            "name": "divide",
            "args": [8]
          }
        ]
      }
    },
    "query": "select s.*, d.hostname, d.sysName from storage s join devices d where s.device_id = 2 and storage_polled >= 1628160600 and storage_polled < 1628160660"
  }
]