#
# Copyright 2020 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Use this file to enable the use of credential stores with Data Collector.

# IMPORTANT: This file includes a set of properties for each credential store type.
# Property names include the default credential store IDs: jks,aws,azure,cyberark,thycotic,vault.
# When you use custom IDs, you must update the corresponding property names.

# To use multiple credential stores of the same type, make sure each credential store
# has a set of related properties defined. Make sure the property names include
# the appropriate credential store ID.

################################################
#       Data Collector Credential Stores       #
################################################

# Defines the credential stores for Data Collector to use. Specify a comma-separated list
# of unique credential store IDs.
credentialStores=jks

################################################
# Java Keystore Credential Store Configuration #
################################################

# The following properties are for a Java keystore credential store that uses the 'jks'
# default credential store ID. If you specified a custom ID in the credentialStores property
# above, replace 'jks' in the property names with the custom ID.

# Defines the implementation of the 'jks' credential store
# Update 'jks' in the property name as needed, but do not change the definition of this property.
credentialStore.jks.def=streamsets-datacollector-jks-credentialstore-lib::com_streamsets_datacollector_credential_javakeystore_JavaKeyStoreCredentialStore

# A Java keystore credential store can be of type JCEKS or PKCS12
credentialStore.jks.config.keystore.type=PKCS12

# The location of the Java keystore. Specify an absolute path or a path relative to the
# $SDC_CONF directory.
credentialStore.jks.config.keystore.file=/data/security/jks-credentialStore.pkcs12

# The password to access the Java keystore
credentialStore.jks.config.keystore.storePassword=pass

############################################################
#    AWS Secrets Manager Credential Store Configuration    #
############################################################

# The following properties are for an AWS Secrets Manager credential store that uses the 'aws'
# default credential store ID. If you specified a custom ID in the credentialStores property,
# replace 'aws' in the property names with the custom ID.

# Defines the implementation of the 'aws' credential store
# Update 'aws' in the property name as needed, but do not change the definition of this property.
credentialStore.aws.def=streamsets-datacollector-aws-secrets-manager-credentialstore-lib::com_streamsets_datacollector_credential_aws_secrets_manager_AWSSecretsManagerCredentialStore

# Default name-key separator for the name parameter in credential functions
credentialStore.aws.config.nameKey.separator=&

# AWS Region
credentialStore.aws.config.region=<MUST BE SET>

# AWS access key
credentialStore.aws.config.access.key=<MUST BE SET>

# AWS secret key
credentialStore.aws.config.secret.key=<MUST BE SET>

# Secrets cache max size
# Maximum number of secrets to cache locally
credentialStore.aws.config.cache.max.size=1024

# Secrets cache TTL
# The number of milliseconds that a cached secret is considered valid before requiring a refresh
# The default is equivalent to 1 hour
credentialStore.aws.config.cache.ttl.millis=3600000

# Requires a group secret for each secret
credentialStore.aws.config.enforceEntryGroup=false

########################################################
#    Azure Key Vault Credential Store Configuration    #
########################################################

# The following properties are for an Azure Key Vault credential store that uses the 'azure'
# default credential store ID. If you specified a custom ID in the credentialStores property,
# replace 'azure' in the property names with the custom ID.

# Defines the implementation of the 'azure' credential store
# Update 'azure' in the property name as needed, but do not change the definition of this property.
credentialStore.azure.def=streamsets-datacollector-azure-keyvault-credentialstore-lib::com_streamsets_datacollector_credential_azure_keyvault_AzureKeyVaultCredentialStore

# Credential refresh interval
# How long a credential can be cached locally before fetching it again from Azure Key Vault.
credentialStore.azure.config.credential.refresh.millis=30000

# Credential retry interval
# How long to wait before retrying to fetch a credential from Azure Key Vault in case of errors.
# This retry delay is not blocking. Locally, it will fail immediately.
credentialStore.azure.config.credential.retry.millis=15000

# Azure Key Vault credential provider URL
# This property must be set.
# credentialStore.azure.config.vault.url=https://<YOUR_KEY_VAULT>.vault.azure.net/

# Azure Key Vault client ID for this Data Collector
#credentialStore.azure.config.client.id=<MUST BE SET>

# Azure Key Vault client key for this Data Collector
#credentialStore.azure.config.client.key=<MUST BE SET>

# ERequires a group secret for each secret
credentialStore.azure.config.enforceEntryGroup=false

#################################################
#    CyberArk Credential Store Configuration    #
#################################################

# The following properties are for a CyberArk credential store that uses the 'cyberark'
# default credential store ID. If you specified a custom ID in the credentialStores property,
# replace 'cyberark' in the property names with the custom ID.

# Defines the implementation of the 'cyberark' credential store
# Update 'cyberark' in the property name as needed, but do not change the definition of this property.
credentialStore.cyberark.def=streamsets-datacollector-cyberark-credentialstore-lib::com_streamsets_datacollector_credential_cyberark_CyberArkCredentialStore

# Credential refresh interval
# How long a credential can be cached locally before fetching it again from CyberArk.
#credentialStore.cyberark.config.credential.refresh.millis=30000

# Credential retry interval
# How long to wait before retrying to fetch a credential from CyberArk in case of errors.
# This retry delay is not blocking. Locally, it will fail immediately.
#credentialStore.cyberark.config.credential.retry.millis=15000

# Connector type to CyberArk
# Currently 'webservices' is the only supported connector
#credentialStore.cyberark.config.connector=webservices

##############################################################
#     CyberArk Credential Store Web Service Configuration    #
##############################################################

# CyberArk Central Credential Provider credential retrieval web service URL
credentialStore.cyberark.config.ws.url=https://<HOST>:<PORT>/AIMWebService/api/Accounts

# CyberArk application ID for this Data Collector
credentialStore.cyberark.config.ws.appId=<MUST BE SET>

# Maximum number of concurrent web service calls to CyberArk
#credentialStore.cyberark.config.ws.maxConcurrentConnections=10

# HTTP connection inactivity check
#credentialStore.cyberark.config.ws.validateAfterInactivity.millis=60000

# TCP and HTTP connection timeout
#credentialStore.cyberark.config.ws.connectionTimeout.millis=10000

# Default separator for CyberArk safe, folder, object name, and object element used in the
# name parameter in credential functions.
#credentialStore.cyberark.config.ws.nameSeparator=&

# HTTP authentication mechanism used by CyberArk Central Credential Provider web services
# Possible values: none, basic, digest
#credentialStore.cyberark.config.ws.http.authentication=none

# User name when using basic or digest authentication
#credentialStore.cyberark.config.ws.http.authentication.user=

# Password when using basic or digest authentication
#credentialStore.cyberark.config.ws.http.authentication.password=

# When using HTTPS and the server certificate is not signed by a public CA, a truststore
# with the public certificate must be available in this truststore file, or in the JDK default truststore.
# Specify an absolute path or a path relative to the $SDC_CONF directory.
#credentialStore.cyberark.config.ws.truststoreFile=

# The password to access the truststore file
#credentialStore.cyberark.config.ws.truststorePassword=

# HTTPS supported protocols
#credentialStore.cyberark.config.ws.supportedProtocols=TLSv1.2

# Determines if the hostname of the CyberArk Central Credential Provider web service should be
# verified against the domain defined in the HTTPS certificate.
#credentialStore.cyberark.config.ws.hostnameVerifier.skip=false

# When using HTTPS and the CyberArk Central Credential Provider web service is configured to require client side
# certificates, the client certificate must be available in this keystore file, or in the JDK default truststore.
# Specify an absolute path or a path relative to the $SDC_CONF directory.
#credentialStore.cyberark.config.ws.keystoreFile=

# The password to access the keystore file
#credentialStore.cyberark.config.ws.keystorePassword=

# The password to access the certificate within the keystore file
#credentialStore.cyberark.config.ws.keyPassword=

# Requires a group secret for each secret
credentialStore.cyberark.config.enforceEntryGroup=false

########################################################
#    Hashicorp Vault Credential Store Configuration    #
########################################################

# The following properties are for a Hashicorp Vault credential store that uses the 'vault'
# default credential store ID. If you specified a custom ID in the credentialStores property,
# replace 'vault' in the property names with the custom ID.

# Defines the implementation of the 'vault' credential store
# Update 'vault' in the property name as needed, but do not change the definition of this property.
credentialStore.vault.def=streamsets-datacollector-vault-credentialstore-lib::com_streamsets_datacollector_credential_vault_VaultCredentialStore

# Default path-key separator for the name parameter in credential functions
credentialStore.vault.config.pathKey.separator=&

# URL of the Vault server to connect to
credentialStore.vault.config.addr=http://localhost:8200

# AppRole mode (recommended)
credentialStore.vault.config.role.id=
credentialStore.vault.config.secret.id=${file("vault-secret-id")}

#
# The Vault User ID is generated by hashing the MAC address belonging to the network interface assigned
# the IP address of hostname -f. It can also be retrieved by the show-vault-id command of the
# StreamSets executable.
#

# Data Collector authenticates with Vault using the AppId authentication backend. The app-id must be specified below.
# credentialStore.vault.config.app.id=

# Optional Settings

# Supported KV Secret Engine version 1 by default. Possible values: 1 or 2.
credentialStore.vault.config.version=1

# Define namespaces for Vault Enterprise
#credentialStore.vault.config.namespace=

# The renewal interval must be shorter than the shortest lease issued by Vault including auth tokens.
credentialStore.vault.config.lease.renewal.interval.sec=60
credentialStore.vault.config.lease.expiration.buffer.sec=120
credentialStore.vault.config.open.timeout=0
credentialStore.vault.config.proxy.address=
credentialStore.vault.config.proxy.port=8080
credentialStore.vault.config.proxy.username=
credentialStore.vault.config.proxy.password=
credentialStore.vault.config.read.timeout=0
credentialStore.vault.config.ssl.enabled.protocols=TLSv1.2,TLSv1.3
credentialStore.vault.config.ssl.truststore.file=
credentialStore.vault.config.ssl.truststore.password=
credentialStore.vault.config.ssl.verify=true
credentialStore.vault.config.ssl.timeout=0
credentialStore.vault.config.timeout=0

# Requires a group secret for each secret
credentialStore.vault.config.enforceEntryGroup=false

#####################################################################
#    Thycotic Secret Server Credential Store Configuration          #
#####################################################################

# The following properties are for an Thycotic Secret Server credential store that uses the 'thycotic'
# default credential store ID. If you specified a custom ID in the credentialStores property,
# replace 'thycotic' in the property names with the custom ID.

# Defines the implementation of the 'thycotic' credential store.
# Update 'thycotic' in the property name as needed, but do not change the definition of this property.
credentialStore.thycotic.def=streamsets-datacollector-thycotic-credentialstore-lib::com_streamsets_datacollector_credential_thycotic_ThycoticCredentialStore

# Thycotic Secret Server URL. Use the following format: https://<host name>:<port number>.
# Use HTTPS to avoid unencrypted communication.
credentialStore.thycotic.config.url=<MUST BE SET>

# User name to connect to Thycotic Secret Server
credentialStore.thycotic.config.username=<MUST BE SET>

# Password to connect to Thycotic Secret Server
credentialStore.thycotic.config.password=${file("thycotic-secret-password")}

# Cache expiration time
credentialStore.thycotic.config.credential.cache.inactivityExpiration.seconds=1800

# Credential refresh interval
# How long a credential can be cached locally before fetching it again from Thycotic Secret Server.
credentialStore.thycotic.config.credential.refresh.seconds=30000

# Credential retry interval
# How long to wait before retrying to fetch a credential from Thycotic Secret Server in the case of an error.
credentialStore.thycotic.config.credential.retry.seconds=15000

# Buffer for expiring auth tokens. Data Collector renews tokens that expire in less than
# the specified number of seconds. Default is 1201.
credentialStore.thycotic.config.token.expiration.buffer.seconds=1201

# SSL/TLS-enabled protocols. Versions TLSv1.2 or later are recommended. Default is TLSv1.2,TLSv1.3
credentialStore.thycotic.config.ssl.enabled.protocols=TLSv1.2,TLSv1.3

# Path to a Java truststore file. Required when using a private CA or certificates not trusted
# by the Java default truststore.
credentialStore.thycotic.config.ssl.truststore.file=

# Password for the truststore file
credentialStore.thycotic.config.ssl.truststore.password=

# Whether to verify that the Thycotic server hostname matches its certificate.
# Default is true. False is not recommended.
credentialStore.thycotic.config.ssl.verify=true

# Timeout for the SSL/TLS handshake in milliseconds. Default is 0 for no limit.
credentialStore.thycotic.config.ssl.timeout=0

# Separator to use for the Thycotic Secret Server secret ID and field name values in the
# credential name argument used in credential functions.
credentialStore.thycotic.config.nameSeparator=

# Milliseconds to wait for data before timing out.
# Default is 0 for no limit.
credentialStore.thycotic.config.read.timeout=0

# Timeout to establish an HTTP connection to Thycotic Secret Server in milliseconds.
# Default is 0 for no limit.
credentialStore.thycotic.config.open.timeout=0

# Timeout in milliseconds to read from Thycotic Secret Server after a connection has been established.
# Default is 0 for no limit.
credentialStore.thycotic.config.timeout=0

# Requires a group secret for each secret
credentialStore.thycotic.config.enforceEntryGroup=false
